"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchairApi = void 0;
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const BaseHttpClient_1 = require("../BaseHttpClient");
const ApiBuilder_1 = require("../ApiBuilder");
function unwrapRecord(body, key) {
    if (!(key in body.data)) {
        throw new Error(`key ${key} not in response`);
    }
    return body.data[key];
}
class BlockchairApi {
    constructor(client, apiToken) {
        this.client = client;
        this.apiToken = apiToken !== null && apiToken !== void 0 ? apiToken : process.env.BLOCKCHAIR_TOKEN;
    }
    static forCoin(coinName, params = {}) {
        // https://blockchair.com/api/docs#link_M0
        let blockchain;
        switch (coinName) {
            case 'btc':
                blockchain = 'bitcoin';
                break;
            case 'tbtc':
                blockchain = 'bitcoin/testnet';
                break;
            case 'bsv':
                blockchain = 'bitcoin-sv';
                break;
            case 'bch':
                blockchain = 'bitcoin-cash';
                break;
            case 'bcha':
                blockchain = 'ecash';
                break;
            case 'ltc':
                blockchain = 'litecoin';
                break;
            case 'dash':
                blockchain = 'dash';
                break;
            case 'zec':
                blockchain = 'zcash';
                break;
            default:
                throw new ApiBuilder_1.ApiNotImplementedError(coinName);
        }
        const { httpClient = new BaseHttpClient_1.BaseHttpClient() } = params;
        return new BlockchairApi(httpClient.withBaseUrl(`https://api.blockchair.com/${blockchain}`), params.apiToken);
    }
    get(path) {
        return this.client.get(path + (this.apiToken ? `?key=${this.apiToken}` : ''));
    }
    async getAddressInfo(address) {
        if (!address || address.length === 0) {
            throw new Error('invalid address');
        }
        // https://blockchair.com/api/docs#link_300
        return (await this.get(`/dashboards/address/${address}`)).map((body) => {
            return {
                txCount: body.data[address].address.transaction_count,
                balance: body.data[address].address.balance,
            };
        });
    }
    async getUnspentsForAddresses(addr) {
        if (addr.length > 100) {
            throw new Error(`invalid size`);
        }
        // https://blockchair.com/api/docs#link_300
        return (await this.get(`/dashboards/addresses/${addr.join(',')}`)).map((body) => {
            return addr.flatMap((a) => {
                return body.data.utxo.map((unspent) => {
                    return {
                        id: (0, bitgo_1.formatOutputId)({ txid: unspent.transaction_hash, vout: unspent.index }),
                        address: a,
                        value: unspent.value,
                    };
                });
            });
        });
    }
    async getTransaction(txid) {
        return (await this.get(`/dashboards/transaction/${txid}`)).map((body) => {
            return unwrapRecord(body, txid);
        });
    }
    async getTransactionInputs(txid) {
        return (await this.getTransaction(txid)).inputs.map((i) => {
            return {
                id: (0, bitgo_1.formatOutputId)({ txid: i.transaction_hash, vout: i.index }),
                address: i.recipient,
                value: i.value,
            };
        });
    }
    async getTransactionHex(txid) {
        return (await this.get(`/raw/transaction/${txid}`)).map((body) => {
            return unwrapRecord(body, txid).raw_transaction;
        });
    }
}
exports.BlockchairApi = BlockchairApi;
//# sourceMappingURL=data:application/json;base64,