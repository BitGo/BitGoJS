"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockstreamApi = void 0;
const bitgo_1 = require("@bitgo/utxo-lib/dist/src/bitgo");
const BaseHttpClient_1 = require("../BaseHttpClient");
const ApiBuilder_1 = require("../ApiBuilder");
function toBitGoUnspent(u, address, value) {
    return {
        id: (0, bitgo_1.formatOutputId)(u),
        address,
        value,
    };
}
class BlockstreamApi {
    constructor(client) {
        this.client = client;
    }
    static forCoin(coinName, params = {}) {
        const { httpClient = new BaseHttpClient_1.BaseHttpClient() } = params;
        switch (coinName) {
            case 'btc':
                return new BlockstreamApi(httpClient.withBaseUrl('https://blockstream.info/api'));
            case 'tbtc':
                return new BlockstreamApi(httpClient.withBaseUrl('https://blockstream.info/testnet/api'));
        }
        throw new ApiBuilder_1.ApiNotImplementedError(coinName);
    }
    async getAddressInfo(address) {
        const response = await this.client.get(`/address/${address}`);
        return response.map((body) => {
            return {
                txCount: body.chain_stats.tx_count,
                balance: body.chain_stats.funded_txo_sum - body.chain_stats.spent_txo_sum,
            };
        });
    }
    async getUnspentsForAddresses(addrs) {
        if (addrs.length !== 1) {
            return (await (0, BaseHttpClient_1.mapSeries)(addrs, (a) => this.getUnspentsForAddresses([a]))).flat();
        }
        const [address] = addrs;
        return (await this.client.get(`/address/${address}/utxo`)).map((unspents) => unspents.map((u) => toBitGoUnspent(u, address, u.value)));
    }
    async getTransactionHex(txid) {
        return (await this.client.get(`/tx/${txid}/hex`)).map((v) => v);
    }
    async getTransactionInputs(txid) {
        return (await this.client.get(`/tx/${txid}`)).map((body) => body.vin.map((u) => toBitGoUnspent(u, u.prevout.scriptpubkey_address, u.prevout.value)));
    }
}
exports.BlockstreamApi = BlockstreamApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvY2tzdHJlYW1BcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW1wbC9CbG9ja3N0cmVhbUFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUU7QUFHekUsc0RBQTBFO0FBQzFFLDhDQUF1RDtBQWdDdkQsU0FBUyxjQUFjLENBQUMsQ0FBYSxFQUFFLE9BQWUsRUFBRSxLQUFhO0lBQ25FLE9BQU87UUFDTCxFQUFFLEVBQUUsSUFBQSxzQkFBYyxFQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPO1FBQ1AsS0FBSztLQUNOLENBQUM7QUFDSixDQUFDO0FBUUQsTUFBYSxjQUFjO0lBYXpCLFlBQW1CLE1BQWtCO1FBQWxCLFdBQU0sR0FBTixNQUFNLENBQVk7SUFBRyxDQUFDO0lBWnpDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBZ0IsRUFBRSxTQUFzQyxFQUFFO1FBQ3ZFLE1BQU0sRUFBRSxVQUFVLEdBQUcsSUFBSSwrQkFBYyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFDckQsUUFBUSxRQUFRLEVBQUU7WUFDaEIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7WUFDcEYsS0FBSyxNQUFNO2dCQUNULE9BQU8sSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUM7U0FDN0Y7UUFFRCxNQUFNLElBQUksbUNBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUlELEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBZTtRQUNsQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFpQixZQUFZLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDOUUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDM0IsT0FBTztnQkFDTCxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRO2dCQUNsQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhO2FBQzFFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsdUJBQXVCLENBQUMsS0FBZTtRQUMzQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxNQUFNLElBQUEsMEJBQVMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xGO1FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUV4QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBZSxZQUFZLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUN4RixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDekQsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBWTtRQUNsQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBUyxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsSUFBWTtRQUNyQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBcUIsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDN0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3hGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUE5Q0Qsd0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0T3V0cHV0SWQsIFVuc3BlbnQgfSBmcm9tICdAYml0Z28vdXR4by1saWIvZGlzdC9zcmMvYml0Z28nO1xuaW1wb3J0IHsgQWRkcmVzc0FwaSwgQWRkcmVzc0luZm8gfSBmcm9tICcuLi9BZGRyZXNzQXBpJztcbmltcG9ydCB7IFV0eG9BcGkgfSBmcm9tICcuLi9VdHhvQXBpJztcbmltcG9ydCB7IEJhc2VIdHRwQ2xpZW50LCBIdHRwQ2xpZW50LCBtYXBTZXJpZXMgfSBmcm9tICcuLi9CYXNlSHR0cENsaWVudCc7XG5pbXBvcnQgeyBBcGlOb3RJbXBsZW1lbnRlZEVycm9yIH0gZnJvbSAnLi4vQXBpQnVpbGRlcic7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9CbG9ja3N0cmVhbS9lc3Bsb3JhL2Jsb2IvbWFzdGVyL0FQSS5tZCNnZXQtYWRkcmVzc2FkZHJlc3NcbnR5cGUgRXNwbG9yYUFkZHJlc3NTdGF0cyA9IHtcbiAgdHhfY291bnQ6IG51bWJlcjtcbiAgZnVuZGVkX3R4b19zdW06IG51bWJlcjtcbiAgc3BlbnRfdHhvX3N1bTogbnVtYmVyO1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0Jsb2Nrc3RyZWFtL2VzcGxvcmEvYmxvYi9tYXN0ZXIvQVBJLm1kI2dldC1hZGRyZXNzYWRkcmVzc1xudHlwZSBFc3Bsb3JhQWRkcmVzcyA9IHtcbiAgYWRkcmVzczogc3RyaW5nO1xuICBjaGFpbl9zdGF0czogRXNwbG9yYUFkZHJlc3NTdGF0cztcbiAgbWVtcG9vbF9zdGFhdHM6IEVzcGxvcmFBZGRyZXNzU3RhdHM7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vQmxvY2tzdHJlYW0vZXNwbG9yYS9ibG9iL21hc3Rlci9BUEkubWQjZ2V0LWFkZHJlc3NhZGRyZXNzdXR4b1xudHlwZSBFc3Bsb3JhVmluID0ge1xuICB0eGlkOiBzdHJpbmc7XG4gIHZvdXQ6IG51bWJlcjtcbiAgc3RhdHVzOiB1bmtub3duO1xuICB2YWx1ZTogbnVtYmVyO1xuICBwcmV2b3V0OiBFc3Bsb3JhVm91dDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9CbG9ja3N0cmVhbS9lc3Bsb3JhL2Jsb2IvbWFzdGVyL0FQSS5tZCNnZXQtYWRkcmVzc2FkZHJlc3N1dHhvXG50eXBlIEVzcGxvcmFWb3V0ID0ge1xuICBzY3JpcHRwdWJrZXk6IHN0cmluZztcbiAgc2NyaXB0cHVia2V5X2FkZHJlc3M6IHN0cmluZztcbiAgdmFsdWU6IG51bWJlcjtcbn07XG5cbmZ1bmN0aW9uIHRvQml0R29VbnNwZW50KHU6IEVzcGxvcmFWaW4sIGFkZHJlc3M6IHN0cmluZywgdmFsdWU6IG51bWJlcik6IFVuc3BlbnQge1xuICByZXR1cm4ge1xuICAgIGlkOiBmb3JtYXRPdXRwdXRJZCh1KSxcbiAgICBhZGRyZXNzLFxuICAgIHZhbHVlLFxuICB9O1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vQmxvY2tzdHJlYW0vZXNwbG9yYS9ibG9iL21hc3Rlci9BUEkubWQjZ2V0LXR4dHhpZFxudHlwZSBFc3Bsb3JhVHJhbnNhY3Rpb24gPSB7XG4gIHR4aWQ6IHN0cmluZztcbiAgdmluOiBFc3Bsb3JhVmluW107XG59O1xuXG5leHBvcnQgY2xhc3MgQmxvY2tzdHJlYW1BcGkgaW1wbGVtZW50cyBBZGRyZXNzQXBpLCBVdHhvQXBpIHtcbiAgc3RhdGljIGZvckNvaW4oY29pbk5hbWU6IHN0cmluZywgcGFyYW1zOiB7IGh0dHBDbGllbnQ/OiBIdHRwQ2xpZW50IH0gPSB7fSk6IEJsb2Nrc3RyZWFtQXBpIHtcbiAgICBjb25zdCB7IGh0dHBDbGllbnQgPSBuZXcgQmFzZUh0dHBDbGllbnQoKSB9ID0gcGFyYW1zO1xuICAgIHN3aXRjaCAoY29pbk5hbWUpIHtcbiAgICAgIGNhc2UgJ2J0Yyc6XG4gICAgICAgIHJldHVybiBuZXcgQmxvY2tzdHJlYW1BcGkoaHR0cENsaWVudC53aXRoQmFzZVVybCgnaHR0cHM6Ly9ibG9ja3N0cmVhbS5pbmZvL2FwaScpKTtcbiAgICAgIGNhc2UgJ3RidGMnOlxuICAgICAgICByZXR1cm4gbmV3IEJsb2Nrc3RyZWFtQXBpKGh0dHBDbGllbnQud2l0aEJhc2VVcmwoJ2h0dHBzOi8vYmxvY2tzdHJlYW0uaW5mby90ZXN0bmV0L2FwaScpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgQXBpTm90SW1wbGVtZW50ZWRFcnJvcihjb2luTmFtZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY2xpZW50OiBIdHRwQ2xpZW50KSB7fVxuXG4gIGFzeW5jIGdldEFkZHJlc3NJbmZvKGFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8QWRkcmVzc0luZm8+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldDxFc3Bsb3JhQWRkcmVzcz4oYC9hZGRyZXNzLyR7YWRkcmVzc31gKTtcbiAgICByZXR1cm4gcmVzcG9uc2UubWFwKChib2R5KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eENvdW50OiBib2R5LmNoYWluX3N0YXRzLnR4X2NvdW50LFxuICAgICAgICBiYWxhbmNlOiBib2R5LmNoYWluX3N0YXRzLmZ1bmRlZF90eG9fc3VtIC0gYm9keS5jaGFpbl9zdGF0cy5zcGVudF90eG9fc3VtLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFVuc3BlbnRzRm9yQWRkcmVzc2VzKGFkZHJzOiBzdHJpbmdbXSk6IFByb21pc2U8VW5zcGVudFtdPiB7XG4gICAgaWYgKGFkZHJzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgcmV0dXJuIChhd2FpdCBtYXBTZXJpZXMoYWRkcnMsIChhKSA9PiB0aGlzLmdldFVuc3BlbnRzRm9yQWRkcmVzc2VzKFthXSkpKS5mbGF0KCk7XG4gICAgfVxuXG4gICAgY29uc3QgW2FkZHJlc3NdID0gYWRkcnM7XG5cbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuY2xpZW50LmdldDxFc3Bsb3JhVmluW10+KGAvYWRkcmVzcy8ke2FkZHJlc3N9L3V0eG9gKSkubWFwKCh1bnNwZW50cykgPT5cbiAgICAgIHVuc3BlbnRzLm1hcCgodSkgPT4gdG9CaXRHb1Vuc3BlbnQodSwgYWRkcmVzcywgdS52YWx1ZSkpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uSGV4KHR4aWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmNsaWVudC5nZXQ8c3RyaW5nPihgL3R4LyR7dHhpZH0vaGV4YCkpLm1hcCgodikgPT4gdik7XG4gIH1cblxuICBhc3luYyBnZXRUcmFuc2FjdGlvbklucHV0cyh0eGlkOiBzdHJpbmcpOiBQcm9taXNlPFVuc3BlbnRbXT4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5jbGllbnQuZ2V0PEVzcGxvcmFUcmFuc2FjdGlvbj4oYC90eC8ke3R4aWR9YCkpLm1hcCgoYm9keSkgPT5cbiAgICAgIGJvZHkudmluLm1hcCgodSkgPT4gdG9CaXRHb1Vuc3BlbnQodSwgdS5wcmV2b3V0LnNjcmlwdHB1YmtleV9hZGRyZXNzLCB1LnByZXZvdXQudmFsdWUpKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==