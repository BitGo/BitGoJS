"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachingHttpClient = void 0;
const url_1 = require("url");
const path = require("path");
const crypto = require("crypto");
const fs = require("fs/promises");
const src_1 = require("../src");
function stripApiTokens(uri) {
    const url = new url_1.URL(uri, 'http://localhost');
    url.searchParams.delete('key');
    return url.pathname + url.searchParams;
}
class CachingHttpClient {
    constructor(cacheDir, client = new src_1.BaseHttpClient()) {
        this.cacheDir = cacheDir;
        this.client = client;
    }
    cachePath(p) {
        p = stripApiTokens(p).replace(/[^a-z0-9]/gi, '_');
        const hash = crypto.createHash('sha256').update(p).digest().toString('hex').slice(0, 8);
        return path.join(this.cacheDir, `${p}.${hash}.json`);
    }
    async readCache(path) {
        let data;
        try {
            data = await fs.readFile(this.cachePath(path), 'utf8');
        }
        catch (e) {
            if (e.code === 'ENOENT') {
                return;
            }
            throw e;
        }
        return {
            map(f) {
                return f(JSON.parse(data));
            },
        };
    }
    async writeCache(path, data) {
        await fs.writeFile(this.cachePath(path), JSON.stringify(data, null, 2), 'utf8');
    }
    async get(path) {
        const cached = await this.readCache(path);
        if (cached) {
            return cached;
        }
        const resp = await this.client.get(path);
        await this.writeCache(path, resp.map((v) => v));
        return resp;
    }
    withBaseUrl(baseUrl) {
        return new CachingHttpClient(this.cacheDir, this.client.withBaseUrl(baseUrl));
    }
}
exports.CachingHttpClient = CachingHttpClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FjaGluZ0h0dHBDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L0NhY2hpbmdIdHRwQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBQ2pDLGtDQUFrQztBQUVsQyxnQ0FBOEQ7QUFFOUQsU0FBUyxjQUFjLENBQUMsR0FBVztJQUNqQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUM3QyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBYSxpQkFBaUI7SUFDNUIsWUFBb0IsUUFBZ0IsRUFBVSxTQUFxQixJQUFJLG9CQUFjLEVBQUU7UUFBbkUsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQW1DO0lBQUcsQ0FBQztJQUUzRixTQUFTLENBQUMsQ0FBUztRQUNqQixDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBSSxJQUFZO1FBQzdCLElBQUksSUFBWSxDQUFDO1FBQ2pCLElBQUk7WUFDRixJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDeEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUssQ0FBUyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ2hDLE9BQU87YUFDUjtZQUNELE1BQU0sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxPQUFPO1lBQ0wsR0FBRyxDQUFJLENBQWlCO2dCQUN0QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0IsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBSSxJQUFZLEVBQUUsSUFBTztRQUN2QyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLENBQUksSUFBWTtRQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUksSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsQ0FBQztRQUM1QyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQ25CLElBQUksRUFDSixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDbkIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFlO1FBQ3pCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDaEYsQ0FBQztDQUNGO0FBL0NELDhDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5cbmltcG9ydCB7IEJhc2VIdHRwQ2xpZW50LCBIdHRwQ2xpZW50LCBSZXNwb25zZSB9IGZyb20gJy4uL3NyYyc7XG5cbmZ1bmN0aW9uIHN0cmlwQXBpVG9rZW5zKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTCh1cmksICdodHRwOi8vbG9jYWxob3N0Jyk7XG4gIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKCdrZXknKTtcbiAgcmV0dXJuIHVybC5wYXRobmFtZSArIHVybC5zZWFyY2hQYXJhbXM7XG59XG5cbmV4cG9ydCBjbGFzcyBDYWNoaW5nSHR0cENsaWVudCBpbXBsZW1lbnRzIEh0dHBDbGllbnQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhY2hlRGlyOiBzdHJpbmcsIHByaXZhdGUgY2xpZW50OiBIdHRwQ2xpZW50ID0gbmV3IEJhc2VIdHRwQ2xpZW50KCkpIHt9XG5cbiAgY2FjaGVQYXRoKHA6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcCA9IHN0cmlwQXBpVG9rZW5zKHApLnJlcGxhY2UoL1teYS16MC05XS9naSwgJ18nKTtcbiAgICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShwKS5kaWdlc3QoKS50b1N0cmluZygnaGV4Jykuc2xpY2UoMCwgOCk7XG4gICAgcmV0dXJuIHBhdGguam9pbih0aGlzLmNhY2hlRGlyLCBgJHtwfS4ke2hhc2h9Lmpzb25gKTtcbiAgfVxuXG4gIGFzeW5jIHJlYWRDYWNoZTxUPihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFJlc3BvbnNlPFQ+IHwgdW5kZWZpbmVkPiB7XG4gICAgbGV0IGRhdGE6IHN0cmluZztcbiAgICB0cnkge1xuICAgICAgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKHRoaXMuY2FjaGVQYXRoKHBhdGgpLCAndXRmOCcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICgoZSBhcyBhbnkpLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcDxWPihmOiAoYm9keTogVCkgPT4gVikge1xuICAgICAgICByZXR1cm4gZihKU09OLnBhcnNlKGRhdGEpKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIHdyaXRlQ2FjaGU8VD4ocGF0aDogc3RyaW5nLCBkYXRhOiBUKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRoaXMuY2FjaGVQYXRoKHBhdGgpLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSwgJ3V0ZjgnKTtcbiAgfVxuXG4gIGFzeW5jIGdldDxUPihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFJlc3BvbnNlPFQ+PiB7XG4gICAgY29uc3QgY2FjaGVkID0gYXdhaXQgdGhpcy5yZWFkQ2FjaGU8VD4ocGF0aCk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldDxUPihwYXRoKTtcbiAgICBhd2FpdCB0aGlzLndyaXRlQ2FjaGUoXG4gICAgICBwYXRoLFxuICAgICAgcmVzcC5tYXAoKHYpID0+IHYpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcDtcbiAgfVxuXG4gIHdpdGhCYXNlVXJsKGJhc2VVcmw6IHN0cmluZyk6IEh0dHBDbGllbnQge1xuICAgIHJldHVybiBuZXcgQ2FjaGluZ0h0dHBDbGllbnQodGhpcy5jYWNoZURpciwgdGhpcy5jbGllbnQud2l0aEJhc2VVcmwoYmFzZVVybCkpO1xuICB9XG59XG4iXX0=