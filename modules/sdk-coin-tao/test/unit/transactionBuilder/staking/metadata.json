{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 1,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 2,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Nonce",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Nonce",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 4,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 6,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 8,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": 9,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": 10,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 11,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 11,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 11,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 12,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "proof_size",
                      "type": 12,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 12,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 14,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 16,
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 16,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 17
                }
              },
              "docs": []
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 18,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 19,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 20
                }
              },
              "docs": []
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 21
                },
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 85,
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": 21,
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 45,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "RuntimeEvent"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 31,
                          "typeName": "pallet_grandpa::Event",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": 37,
                          "typeName": "pallet_transaction_payment::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "SubtensorModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 38,
                          "typeName": "pallet_subtensor::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Triumvirate",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "TriumvirateMembers",
                      "fields": [
                        {
                          "name": null,
                          "type": 49,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "SenateMembers",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 51,
                          "typeName": "pallet_utility::Event",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 52,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 53,
                          "typeName": "pallet_multisig::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "pallet_preimage::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 56,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Registry",
                      "fields": [
                        {
                          "name": null,
                          "type": 61,
                          "typeName": "pallet_registry::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Commitments",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "pallet_commitments::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "AdminUtils",
                      "fields": [
                        {
                          "name": null,
                          "type": 63,
                          "typeName": "pallet_admin_utils::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "SafeMode",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "pallet_safe_mode::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 66,
                          "typeName": "pallet_ethereum::Event",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 77,
                          "typeName": "pallet_evm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 79,
                          "typeName": "pallet_base_fee::Event",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Drand",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "pallet_drand::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 26,
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "check_version",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upgrade was authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 11,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "TransactionalError",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Exhausted",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Corruption",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Unavailable",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "RootNotAllowed",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 18,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "OnlyProvider",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "CannotCreateHold",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "NotExpendable",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Blocked",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NoLayer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 32,
                          "typeName": "AuthorityList",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 33
                }
              },
              "docs": []
            }
          },
          {
            "id": 33,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  34,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "ed25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": 36,
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    },
                    {
                      "name": "TotalIssuanceForced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The `TotalIssuance` was forcefully changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NetworkAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "a new network is added."
                      ]
                    },
                    {
                      "name": "NetworkRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "a network is removed."
                      ]
                    },
                    {
                      "name": "StakeAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "stake has been transferred from the a coldkey account onto the hotkey staking account."
                      ]
                    },
                    {
                      "name": "StakeRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "stake has been removed from the hotkey staking account onto the coldkey account."
                      ]
                    },
                    {
                      "name": "StakeMoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "stake has been moved from origin (hotkey, subnet ID) to destination (hotkey, subnet ID) of this amount (in TAO)."
                      ]
                    },
                    {
                      "name": "WeightsSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "a caller successfully sets their weights on a subnetwork."
                      ]
                    },
                    {
                      "name": "NeuronRegistered",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "a new neuron account has been registered to the chain."
                      ]
                    },
                    {
                      "name": "BulkNeuronsRegistered",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "multiple uids have been concurrently registered."
                      ]
                    },
                    {
                      "name": "BulkBalancesSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "FIXME: Not used yet"
                      ]
                    },
                    {
                      "name": "MaxAllowedUidsSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "max allowed uids has been set for a subnetwork."
                      ]
                    },
                    {
                      "name": "MaxWeightLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "the max weight limit has been set for a subnetwork."
                      ]
                    },
                    {
                      "name": "DifficultySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "the difficulty has been set for a subnet."
                      ]
                    },
                    {
                      "name": "AdjustmentIntervalSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "the adjustment interval is set for a subnet."
                      ]
                    },
                    {
                      "name": "RegistrationPerIntervalSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "registration per interval is set for a subnet."
                      ]
                    },
                    {
                      "name": "MaxRegistrationsPerBlockSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "we set max registrations per block."
                      ]
                    },
                    {
                      "name": "ActivityCutoffSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "an activity cutoff is set for a subnet."
                      ]
                    },
                    {
                      "name": "RhoSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Rho value is set."
                      ]
                    },
                    {
                      "name": "KappaSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Kappa is set for a subnet."
                      ]
                    },
                    {
                      "name": "MinAllowedWeightSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "minimum allowed weight is set for a subnet."
                      ]
                    },
                    {
                      "name": "ValidatorPruneLenSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "the validator pruning length has been set."
                      ]
                    },
                    {
                      "name": "ScalingLawPowerSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "the scaling law power has been set for a subnet."
                      ]
                    },
                    {
                      "name": "WeightsSetRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "weights set rate limit has been set for a subnet."
                      ]
                    },
                    {
                      "name": "ImmunityPeriodSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "immunity period is set for a subnet."
                      ]
                    },
                    {
                      "name": "BondsMovingAverageSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "bonds moving average is set for a subnet."
                      ]
                    },
                    {
                      "name": "BondsPenaltySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "bonds penalty is set for a subnet."
                      ]
                    },
                    {
                      "name": "MaxAllowedValidatorsSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "setting the max number of allowed validators on a subnet."
                      ]
                    },
                    {
                      "name": "AxonServed",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "the axon server information is added to the network."
                      ]
                    },
                    {
                      "name": "PrometheusServed",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "the prometheus server information is added to the network."
                      ]
                    },
                    {
                      "name": "EmissionValuesSet",
                      "fields": [],
                      "index": 28,
                      "docs": [
                        "emission ratios for all networks is set."
                      ]
                    },
                    {
                      "name": "DelegateAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "a hotkey has become a delegate."
                      ]
                    },
                    {
                      "name": "DefaultTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "the default take is set."
                      ]
                    },
                    {
                      "name": "WeightsVersionKeySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "weights version key is set for a network."
                      ]
                    },
                    {
                      "name": "MinDifficultySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "setting min difficulty on a network."
                      ]
                    },
                    {
                      "name": "MaxDifficultySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "setting max difficulty on a network."
                      ]
                    },
                    {
                      "name": "ServingRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "setting the prometheus serving rate limit."
                      ]
                    },
                    {
                      "name": "BurnSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "setting burn on a network."
                      ]
                    },
                    {
                      "name": "MaxBurnSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "setting max burn on a network."
                      ]
                    },
                    {
                      "name": "MinBurnSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "setting min burn on a network."
                      ]
                    },
                    {
                      "name": "TxRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "setting the transaction rate limit."
                      ]
                    },
                    {
                      "name": "TxDelegateTakeRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": [
                        "setting the delegate take transaction rate limit."
                      ]
                    },
                    {
                      "name": "TxChildKeyTakeRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": [
                        "setting the childkey take transaction rate limit."
                      ]
                    },
                    {
                      "name": "MinChildKeyTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": [
                        "minimum childkey take set"
                      ]
                    },
                    {
                      "name": "MaxChildKeyTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": [
                        "maximum childkey take set"
                      ]
                    },
                    {
                      "name": "ChildKeyTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": [
                        "childkey take set"
                      ]
                    },
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": [
                        "a sudo call is done."
                      ]
                    },
                    {
                      "name": "RegistrationAllowed",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": [
                        "registration is allowed/disallowed for a subnet."
                      ]
                    },
                    {
                      "name": "PowRegistrationAllowed",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": [
                        "POW registration is allowed/disallowed for a subnet."
                      ]
                    },
                    {
                      "name": "TempoSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": [
                        "setting tempo on a network"
                      ]
                    },
                    {
                      "name": "RAORecycledForRegistrationSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": [
                        "setting the RAO recycled for registration."
                      ]
                    },
                    {
                      "name": "StakeThresholdSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": [
                        "min stake is set for validators to set weights."
                      ]
                    },
                    {
                      "name": "SenateRequiredStakePercentSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": [
                        "setting the minimum required stake amount for senate registration."
                      ]
                    },
                    {
                      "name": "AdjustmentAlphaSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": [
                        "setting the adjustment alpha on a subnet."
                      ]
                    },
                    {
                      "name": "Faucet",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": [
                        "the faucet it called on the test net."
                      ]
                    },
                    {
                      "name": "SubnetOwnerCutSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": [
                        "the subnet owner cut is set."
                      ]
                    },
                    {
                      "name": "NetworkRateLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": [
                        "the network creation rate limit is set."
                      ]
                    },
                    {
                      "name": "NetworkImmunityPeriodSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": [
                        "the network immunity period is set."
                      ]
                    },
                    {
                      "name": "NetworkMinLockCostSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": [
                        "the network minimum locking cost is set."
                      ]
                    },
                    {
                      "name": "SubnetLimitSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": [
                        "the maximum number of subnets is set"
                      ]
                    },
                    {
                      "name": "NetworkLockCostReductionIntervalSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": [
                        "the lock cost reduction is set"
                      ]
                    },
                    {
                      "name": "TakeDecreased",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": [
                        "the take for a delegate is decreased."
                      ]
                    },
                    {
                      "name": "TakeIncreased",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": [
                        "the take for a delegate is increased."
                      ]
                    },
                    {
                      "name": "HotkeySwapped",
                      "fields": [
                        {
                          "name": "coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of coldkey"
                          ]
                        },
                        {
                          "name": "old_hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of old hotkey"
                          ]
                        },
                        {
                          "name": "new_hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of new hotkey"
                          ]
                        }
                      ],
                      "index": 61,
                      "docs": [
                        "the hotkey is swapped"
                      ]
                    },
                    {
                      "name": "MaxDelegateTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": [
                        "maximum delegate take is set by sudo/admin transaction"
                      ]
                    },
                    {
                      "name": "MinDelegateTakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": [
                        "minimum delegate take is set by sudo/admin transaction"
                      ]
                    },
                    {
                      "name": "SenateAdjusted",
                      "fields": [
                        {
                          "name": "old_member",
                          "type": 42,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "the account ID of the old senate member, if any"
                          ]
                        },
                        {
                          "name": "new_member",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of the new senate member"
                          ]
                        }
                      ],
                      "index": 64,
                      "docs": [
                        "a member of the senate is adjusted"
                      ]
                    },
                    {
                      "name": "ColdkeySwapped",
                      "fields": [
                        {
                          "name": "old_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of old coldkey"
                          ]
                        },
                        {
                          "name": "new_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "the account ID of new coldkey"
                          ]
                        },
                        {
                          "name": "swap_cost",
                          "type": 6,
                          "typeName": "u64",
                          "docs": [
                            "the swap cost"
                          ]
                        }
                      ],
                      "index": 65,
                      "docs": [
                        "A coldkey has been swapped"
                      ]
                    },
                    {
                      "name": "AllBalanceUnstakedAndTransferredToNewColdkey",
                      "fields": [
                        {
                          "name": "current_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the current coldkey"
                          ]
                        },
                        {
                          "name": "new_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the new coldkey"
                          ]
                        },
                        {
                          "name": "total_balance",
                          "type": 6,
                          "typeName": "<<T as Config>::Currency as fungible::Inspect<<T as frame_system::\nConfig>::AccountId,>>::Balance",
                          "docs": [
                            "The total balance of the hotkey"
                          ]
                        }
                      ],
                      "index": 66,
                      "docs": [
                        "All balance of a hotkey has been unstaked and transferred to a new coldkey"
                      ]
                    },
                    {
                      "name": "ColdkeySwapScheduled",
                      "fields": [
                        {
                          "name": "old_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the old coldkey"
                          ]
                        },
                        {
                          "name": "new_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the new coldkey"
                          ]
                        },
                        {
                          "name": "execution_block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": [
                            "The arbitration block for the coldkey swap"
                          ]
                        },
                        {
                          "name": "swap_cost",
                          "type": 6,
                          "typeName": "u64",
                          "docs": [
                            "The swap cost"
                          ]
                        }
                      ],
                      "index": 67,
                      "docs": [
                        "A coldkey swap has been scheduled"
                      ]
                    },
                    {
                      "name": "ArbitrationPeriodExtended",
                      "fields": [
                        {
                          "name": "coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the coldkey"
                          ]
                        }
                      ],
                      "index": 68,
                      "docs": [
                        "The arbitration period has been extended"
                      ]
                    },
                    {
                      "name": "SetChildrenScheduled",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "Vec<(u64, T::AccountId)>",
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": [
                        "Setting of children of a hotkey have been scheduled"
                      ]
                    },
                    {
                      "name": "SetChildren",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "Vec<(u64, T::AccountId)>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": [
                        "The children of a hotkey have been set"
                      ]
                    },
                    {
                      "name": "NetworkMaxStakeSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": [
                        "The network maximum stake has been set"
                      ]
                    },
                    {
                      "name": "ChainIdentitySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": [
                        "The identity of a coldkey has been set"
                      ]
                    },
                    {
                      "name": "SubnetIdentitySet",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": [
                        "The identity of a subnet has been set"
                      ]
                    },
                    {
                      "name": "SubnetIdentityRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": [
                        "The identity of a subnet has been removed"
                      ]
                    },
                    {
                      "name": "DissolveNetworkScheduled",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID schedule the dissolve network extrisnic"
                          ]
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [
                            "network ID will be dissolved"
                          ]
                        },
                        {
                          "name": "execution_block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": [
                            "extrinsic execution block number"
                          ]
                        }
                      ],
                      "index": 75,
                      "docs": [
                        "A dissolve network extrinsic scheduled."
                      ]
                    },
                    {
                      "name": "ColdkeySwapScheduleDurationSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": [
                        "The duration of schedule coldkey swap has been set"
                      ]
                    },
                    {
                      "name": "DissolveNetworkScheduleDurationSet",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": [
                        "The duration of dissolve network has been set"
                      ]
                    },
                    {
                      "name": "CRV3WeightsCommitted",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": [
                        "Commit-reveal v3 weights have been successfully committed.",
                        "",
                        "- **who**: The account ID of the user committing the weights.",
                        "- **netuid**: The network identifier.",
                        "- **commit_hash**: The hash representing the committed weights."
                      ]
                    },
                    {
                      "name": "WeightsCommitted",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": [
                        "Weights have been successfully committed.",
                        "",
                        "- **who**: The account ID of the user committing the weights.",
                        "- **netuid**: The network identifier.",
                        "- **commit_hash**: The hash representing the committed weights."
                      ]
                    },
                    {
                      "name": "WeightsRevealed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": [
                        "Weights have been successfully revealed.",
                        "",
                        "- **who**: The account ID of the user revealing the weights.",
                        "- **netuid**: The network identifier.",
                        "- **commit_hash**: The hash of the revealed weights."
                      ]
                    },
                    {
                      "name": "WeightsBatchRevealed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "Vec<H256>",
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": [
                        "Weights have been successfully batch revealed.",
                        "",
                        "- **who**: The account ID of the user revealing the weights.",
                        "- **netuid**: The network identifier.",
                        "- **revealed_hashes**: A vector of hashes representing each revealed weight set."
                      ]
                    },
                    {
                      "name": "BatchWeightsCompleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 46,
                          "typeName": "Vec<Compact<u16>>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": [
                        "A batch of weights (or commits) have been force-set.",
                        "",
                        "- **netuids**: The netuids these weights were successfully set/committed for.",
                        "- **who**: The hotkey that set this batch."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "fields": [],
                      "index": 83,
                      "docs": [
                        "A batch extrinsic completed but with some errors."
                      ]
                    },
                    {
                      "name": "BatchWeightItemFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "sp_runtime::DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": [
                        "A weight set among a batch of weights failed.",
                        "",
                        "- **error**: The dispatch error emitted by the failed item."
                      ]
                    },
                    {
                      "name": "StakeTransferred",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": [
                        "Stake has been transferred from one coldkey to another on the same subnet.",
                        "Parameters:",
                        "(origin_coldkey, destination_coldkey, hotkey, origin_netuid, destination_netuid, amount)"
                      ]
                    },
                    {
                      "name": "StakeSwapped",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": [
                        "Stake has been swapped from one subnet to another for the same coldkey-hotkey pair.",
                        "",
                        "Parameters:",
                        "(coldkey, hotkey, origin_netuid, destination_netuid, amount)"
                      ]
                    },
                    {
                      "name": "TransferToggle",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": [
                        "Event called when transfer is toggled on a subnet.",
                        "",
                        "Parameters:",
                        "(netuid, bool)"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 41
                },
                {
                  "name": "E",
                  "type": 26
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 41,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": []
              },
              "docs": []
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 43,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 44
                }
              },
              "docs": []
            }
          },
          {
            "id": 44,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 45,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": []
            }
          },
          {
            "id": 46,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 47
                }
              },
              "docs": []
            }
          },
          {
            "id": 47,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 39
                }
              },
              "docs": []
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that proposed the motion."
                          ]
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [
                            "The index of the proposal."
                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [
                            "The threshold of member for the proposal."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that voted."
                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        },
                        {
                          "name": "voted",
                          "type": 9,
                          "typeName": "bool",
                          "docs": [
                            "Whether the account voted aye."
                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [
                            "The number of yes votes."
                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [
                            "The number of no votes."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        },
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the execution."
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        },
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the execution."
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "The hash of the proposal."
                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [
                            "Whether the proposal was approved."
                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [
                            "Whether the proposal was rejected."
                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo call just took place."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old",
                          "type": 42,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "The old sudo key (if one was previously set)."
                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The new sudo key (if one was set)."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The sudo key has been updated."
                      ]
                    },
                    {
                      "name": "KeyRemoved",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The key was permanently removed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A [sudo_as](Pallet::sudo_as) call just took place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 54,
                          "typeName": "Timepoint<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 54,
                          "typeName": "Timepoint<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 54,
                          "typeName": "Timepoint<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "RetrySet",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        },
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set a retry configuration for some task."
                      ]
                    },
                    {
                      "name": "RetryCancelled",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel a retry configuration for some task."
                      ]
                    },
                    {
                      "name": "CallUnavailable",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    },
                    {
                      "name": "PeriodicFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The given task was unable to be renewed since the agenda is full at that block."
                      ]
                    },
                    {
                      "name": "RetryFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The given task was unable to be retried since the agenda is full at that block or there",
                        "was not enough weight to reschedule it."
                      ]
                    },
                    {
                      "name": "PermanentlyOverweight",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 58,
                          "typeName": "Option<TaskName>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The given task can never be executed since it is overweight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 40,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "PureCreated",
                      "fields": [
                        {
                          "name": "pure",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A pure account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "ProxyType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Owner",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NonCritical",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Senate",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NonFungibile",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Triumvirate",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Governance",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Staking",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Registration",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Transfer",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "SmallTransfer",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "RootWeights",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "ChildKeys",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "SudoUncheckedSetCode",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_registry",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that registered the identity"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Emitted when a user registers an identity"
                      ]
                    },
                    {
                      "name": "IdentityDissolved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that dissolved the identity"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Emitted when a user dissolves an identity"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_commitments",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Commitment",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": [
                            "The netuid of the commitment"
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A commitment was set"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_admin_utils",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_safe_mode",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Entered",
                      "fields": [
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The safe-mode was entered until inclusively this block."
                      ]
                    },
                    {
                      "name": "Extended",
                      "fields": [
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The safe-mode was extended until inclusively this block."
                      ]
                    },
                    {
                      "name": "Exited",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 65,
                          "typeName": "ExitReason",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exited the safe-mode for a specific reason."
                      ]
                    },
                    {
                      "name": "DepositPlaced",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An account reserved funds for either entering or extending the safe-mode."
                      ]
                    },
                    {
                      "name": "DepositReleased",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account had a reserve released that was reserved."
                      ]
                    },
                    {
                      "name": "DepositSlashed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An account had reserve slashed that was reserved."
                      ]
                    },
                    {
                      "name": "CannotDeposit",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Could not hold funds for entering or extending the safe-mode.",
                        "",
                        "This error comes from the underlying `Currency`."
                      ]
                    },
                    {
                      "name": "CannotRelease",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Could not release funds for entering or extending the safe-mode.",
                        "",
                        "This error comes from the underlying `Currency`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_safe_mode",
                "pallet",
                "ExitReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Timeout",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Force",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "transaction_hash",
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "exit_reason",
                          "type": 69,
                          "typeName": "ExitReason",
                          "docs": []
                        },
                        {
                          "name": "extra_data",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 68,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 68,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "ExitSucceed",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "ExitRevert",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 76,
                          "typeName": "ExitFatal",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Returned",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Suicided",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "Opcode",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "MaxNonce",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "evm_core",
                "opcode",
                "Opcode"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 74
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 74,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 74,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 78,
                          "typeName": "Log",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given address."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 67,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 45,
                      "typeName": "Vec<H256>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 14,
                      "typeName": "Bytes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 82,
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 81,
                      "typeName": "[u64; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 81,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "pallet_drand",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BeaconConfigChanged",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NewPulse",
                      "fields": [
                        {
                          "name": "rounds",
                          "type": 84,
                          "typeName": "Vec<RoundNumber>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Successfully set a new pulse(s)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 84,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 86,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 57
                }
              },
              "docs": []
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 88,
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": 74,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 88,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 13,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "check_version",
                      "type": 9,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "Can be executed by every `origin`."
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                        "version!"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 91,
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 93,
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 14,
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "authorize_upgrade_without_checks",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                        "example that the spec name remains the same and that the version number increases. Not",
                        "recommended for normal use. Use `authorize_upgrade` instead.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "apply_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                        "the new `code` in the same block or attempt to schedule the upgrade.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 92
                }
              },
              "docs": []
            }
          },
          {
            "id": 92,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  14,
                  14
                ]
              },
              "docs": []
            }
          },
          {
            "id": 93,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 14
                }
              },
              "docs": []
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 11,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": 11,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": 95,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 96
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 96,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 96,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 96,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 11,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 97,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": 97,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 97,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 11,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 99,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 74,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": 74,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": 102,
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 103
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 103,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 103,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 104
                }
              },
              "docs": []
            }
          },
          {
            "id": 104,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  105,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 105,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    },
                    {
                      "name": "MultiBlockMigrationsOngoing",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "A multi-block migration is ongoing and prevents the current code from being replaced."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "No upgrade authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The submitted code is not authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 45,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 12,
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "[`Config::MinimumPeriod`].",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                        "that changing the complexity of this call could result exhausting the resources in a",
                        "block to execute any other calls.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 110
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 111,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 111,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 110
                }
              },
              "docs": []
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "next_authorities",
                      "type": 115,
                      "typeName": "BoundedAuthorityList<Limit>",
                      "docs": []
                    },
                    {
                      "name": "forced",
                      "type": 116,
                      "typeName": "Option<N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 33
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 32,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 118,
                          "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 128,
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 118,
                          "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 128,
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                        "",
                        "This will trigger a forced authority set change at the beginning of the next session, to",
                        "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                        "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                        "The block production rate (which may be slowed down because of finality lagging) should",
                        "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                        "authority will start voting on top of `best_finalized_block_number` for new finalized",
                        "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                        "block of all validators of the new authority set.",
                        "",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 6,
                      "typeName": "SetId",
                      "docs": []
                    },
                    {
                      "name": "equivocation",
                      "type": 119,
                      "typeName": "Equivocation<H, N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "name": null,
                          "type": 120,
                          "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "name": null,
                          "type": 125,
                          "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 34
                },
                {
                  "name": "V",
                  "type": 121
                },
                {
                  "name": "S",
                  "type": 122
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": 34,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 124,
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": 124,
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 13,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 123,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 123,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 124,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  121,
                  122
                ]
              },
              "docs": []
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 34
                },
                {
                  "name": "V",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": 122
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": 34,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 127,
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": 127,
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 13,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 127,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  126,
                  122
                ]
              },
              "docs": []
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 131
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 133,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 105,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": 132,
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 133,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 131
                }
              },
              "docs": []
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 135
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 136,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 105
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 105,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 136,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 135
                }
              },
              "docs": []
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 138
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 143,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 139
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 139,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "RuntimeHoldReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 140,
                          "typeName": "pallet_preimage::HoldReason",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Registry",
                      "fields": [
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "pallet_registry::HoldReason",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "SafeMode",
                      "fields": [
                        {
                          "name": null,
                          "type": 142,
                          "typeName": "pallet_safe_mode::HoldReason",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "HoldReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Preimage",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_registry",
                "pallet",
                "HoldReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RegistryIdentity",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "pallet_safe_mode",
                "pallet",
                "HoldReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EnterOrExtend",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 143,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 138
                }
              },
              "docs": []
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 145
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 147,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 146
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 146,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "RuntimeFreezeReason"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 147,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 145
                }
              },
              "docs": []
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibility of churn)."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_adjust_total_issuance",
                      "fields": [
                        {
                          "name": "direction",
                          "type": 152,
                          "typeName": "AdjustmentDirection",
                          "docs": []
                        },
                        {
                          "name": "delta",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Adjust the total issuance in a saturating way.",
                        "",
                        "Can only be called by root and always needs a positive `delta`.",
                        "",
                        "# Example"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "value",
                          "type": 12,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Burn the specified liquid free balance from the origin account.",
                        "",
                        "If the origin's account ends up below the existential deposit as a result",
                        "of the burn and `keep_alive` is false, the account will be reaped.",
                        "",
                        "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                        "this `burn` operation will reduce total issuance by the amount _burned_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 41
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 150,
                          "typeName": "AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 150,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 41
                }
              },
              "docs": []
            }
          },
          {
            "id": 151,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": []
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AdjustmentDirection"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Increase",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Decrease",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    },
                    {
                      "name": "IssuanceDeactivated",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The issuance cannot be modified since it is already deactivated."
                      ]
                    },
                    {
                      "name": "DeltaZero",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The delta cannot be zero."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 156,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  39
                ]
              },
              "docs": []
            }
          },
          {
            "id": 157,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  39,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 158,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  43,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 159,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  0,
                  39
                ]
              },
              "docs": []
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "substrate_fixed",
                "FixedI128"
              ],
              "params": [
                {
                  "name": "Frac",
                  "type": 161
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bits",
                      "type": 170,
                      "typeName": "i128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 162
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 162,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 163
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 163,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 164
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 164,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 165
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 165,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 166
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 166,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 167
                },
                {
                  "name": "B",
                  "type": 168
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 167,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 168,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UTerm"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "typenum",
                "bit",
                "B1"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "typenum",
                "bit",
                "B0"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 170,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "I128"
              },
              "docs": []
            }
          },
          {
            "id": 171,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "substrate_fixed",
                "FixedU128"
              ],
              "params": [
                {
                  "name": "Frac",
                  "type": 173
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bits",
                      "type": 8,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "typenum",
                "uint",
                "UInt"
              ],
              "params": [
                {
                  "name": "U",
                  "type": 161
                },
                {
                  "name": "B",
                  "type": 169
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msb",
                      "type": 161,
                      "typeName": "U",
                      "docs": []
                    },
                    {
                      "name": "lsb",
                      "type": 169,
                      "typeName": "B",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 174,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  39,
                  39
                ]
              },
              "docs": []
            }
          },
          {
            "id": 175,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 39
                }
              },
              "docs": []
            }
          },
          {
            "id": 176,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 177
                }
              },
              "docs": []
            }
          },
          {
            "id": 177,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  6,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 178,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": []
            }
          },
          {
            "id": 179,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 174
                }
              },
              "docs": []
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "AxonInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "ip",
                      "type": 8,
                      "typeName": "u128",
                      "docs": []
                    },
                    {
                      "name": "port",
                      "type": 39,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "ip_type",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "protocol",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "placeholder1",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "placeholder2",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "NeuronCertificate"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "public_key",
                      "type": 182,
                      "typeName": "BoundedVec<u8, ConstU32<64>>",
                      "docs": []
                    },
                    {
                      "name": "algorithm",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "PrometheusInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "ip",
                      "type": 8,
                      "typeName": "u128",
                      "docs": []
                    },
                    {
                      "name": "port",
                      "type": 39,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "ip_type",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "ChainIdentity"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "url",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "discord",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "additional",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "ChainIdentityV2"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "url",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "github_repo",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "discord",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "additional",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "SubnetIdentity"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "subnet_name",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "github_repo",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "subnet_contact",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "SubnetIdentityV2"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "subnet_name",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "github_repo",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "subnet_contact",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "subnet_url",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "discord",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "additional",
                      "type": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 188,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  39,
                  39
                ]
              },
              "docs": []
            }
          },
          {
            "id": 189,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 190
                }
              },
              "docs": []
            }
          },
          {
            "id": 190,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  13,
                  6,
                  6,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 191,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  39,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 192,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 193
                }
              },
              "docs": []
            }
          },
          {
            "id": 193,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  194,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "dests",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "weights",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "version_key",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "--- Sets the caller weights for the incentive mechanism. The call can be",
                        "made from the hotkey account so is potentially insecure, however, the damage",
                        "of changing weights is minimal if caught early. This function includes all the",
                        "checks that the passed weights meet the requirements. Stored as u16s they represent",
                        "rational values in the range [0,1] which sum to 1 and can be interpreted as",
                        "probabilities. The specific weights determine how inflation propagates outward",
                        "from this peer.",
                        "",
                        "Note: The 16 bit integers weights should represent 1.0 as the max u16.",
                        "However, the function normalizes all integers to u16_max anyway. This means that if the sum of all",
                        "elements is larger or smaller than the amount of elements * u16_max, all elements",
                        "will be corrected for this deviation.",
                        "",
                        "# Args:",
                        "* `origin`: (<T as frame_system::Config>Origin):",
                        "    - The caller, a hotkey who wishes to set their weights.",
                        "",
                        "* `netuid` (u16):",
                        "\t- The network uid we are setting these weights on.",
                        "",
                        "* `dests` (Vec<u16>):",
                        "\t- The edge endpoint for the weight, i.e. j for w_ij.",
                        "",
                        "* 'weights' (Vec<u16>):",
                        "\t- The u16 integer encoded weights. Interpreted as rational",
                        "\t\tvalues in the range [0,1]. They must sum to in32::MAX.",
                        "",
                        "* 'version_key' ( u64 ):",
                        "\t- The network version key to check if the validator is up to date.",
                        "",
                        "# Event:",
                        "* WeightsSet;",
                        "\t- On successfully setting the weights on chain.",
                        "",
                        "# Raises:",
                        "* 'SubNetworkDoesNotExist':",
                        "\t- Attempting to set weights on a non-existent network.",
                        "",
                        "* 'NotRegistered':",
                        "\t- Attempting to set weights from a non registered account.",
                        "",
                        "* 'WeightVecNotEqualSize':",
                        "\t- Attempting to set weights with uids not of same length.",
                        "",
                        "* 'DuplicateUids':",
                        "\t- Attempting to set weights with duplicate uids.",
                        "",
                        "    * 'UidsLengthExceedUidsInSubNet':",
                        "\t- Attempting to set weights above the max allowed uids.",
                        "",
                        "* 'UidVecContainInvalidOne':",
                        "\t- Attempting to set weights with invalid uids.",
                        "",
                        "* 'WeightVecLengthIsLow':",
                        "\t- Attempting to set weights with fewer weights than min.",
                        "",
                        "* 'MaxWeightExceeded':",
                        "\t- Attempting to set weights with max value exceeding limit."
                      ]
                    },
                    {
                      "name": "batch_set_weights",
                      "fields": [
                        {
                          "name": "netuids",
                          "type": 46,
                          "typeName": "Vec<Compact<u16>>",
                          "docs": []
                        },
                        {
                          "name": "weights",
                          "type": 196,
                          "typeName": "Vec<Vec<(Compact<u16>, Compact<u16>)>>",
                          "docs": []
                        },
                        {
                          "name": "version_keys",
                          "type": 199,
                          "typeName": "Vec<Compact<u64>>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": [
                        "--- Allows a hotkey to set weights for multiple netuids as a batch.",
                        "",
                        "# Args:",
                        "* `origin`: (<T as frame_system::Config>Origin):",
                        "    - The caller, a hotkey who wishes to set their weights.",
                        "",
                        "* `netuids` (Vec<Compact<u16>>):",
                        "\t- The network uids we are setting these weights on.",
                        "",
                        "* `weights` (Vec<Vec<(Compact<u16>, Compact<u16>)>):",
                        "\t- The weights to set for each network. [(uid, weight), ...]",
                        "",
                        "* `version_keys` (Vec<Compact<u64>>):",
                        "\t- The network version keys to check if the validator is up to date.",
                        "",
                        "# Event:",
                        "* WeightsSet;",
                        "\t- On successfully setting the weights on chain.",
                        "* BatchWeightsCompleted;",
                        "\t- On success of the batch.",
                        "* BatchCompletedWithErrors;",
                        "\t- On failure of any of the weights in the batch.",
                        "* BatchWeightItemFailed;",
                        "\t- On failure for each failed item in the batch.",
                        ""
                      ]
                    },
                    {
                      "name": "commit_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "commit_hash",
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": [
                        "---- Used to commit a hash of your weight values to later be revealed.",
                        "",
                        "# Args:",
                        "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                        "  - The signature of the committing hotkey.",
                        "",
                        "* `netuid` (`u16`):",
                        "  - The u16 network identifier.",
                        "",
                        "* `commit_hash` (`H256`):",
                        "  - The hash representing the committed weights.",
                        "",
                        "# Raises:",
                        "* `CommitRevealDisabled`:",
                        "  - Attempting to commit when the commit-reveal mechanism is disabled.",
                        "",
                        "* `TooManyUnrevealedCommits`:",
                        "  - Attempting to commit when the user has more than the allowed limit of unrevealed commits.",
                        ""
                      ]
                    },
                    {
                      "name": "batch_commit_weights",
                      "fields": [
                        {
                          "name": "netuids",
                          "type": 46,
                          "typeName": "Vec<Compact<u16>>",
                          "docs": []
                        },
                        {
                          "name": "commit_hashes",
                          "type": 45,
                          "typeName": "Vec<H256>",
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": [
                        "--- Allows a hotkey to commit weight hashes for multiple netuids as a batch.",
                        "",
                        "# Args:",
                        "* `origin`: (<T as frame_system::Config>Origin):",
                        "    - The caller, a hotkey who wishes to set their weights.",
                        "",
                        "* `netuids` (Vec<Compact<u16>>):",
                        "\t- The network uids we are setting these weights on.",
                        "",
                        "* `commit_hashes` (Vec<H256>):",
                        "\t- The commit hashes to commit.",
                        "",
                        "# Event:",
                        "* WeightsSet;",
                        "\t- On successfully setting the weights on chain.",
                        "* BatchWeightsCompleted;",
                        "\t- On success of the batch.",
                        "* BatchCompletedWithErrors;",
                        "\t- On failure of any of the weights in the batch.",
                        "* BatchWeightItemFailed;",
                        "\t- On failure for each failed item in the batch.",
                        ""
                      ]
                    },
                    {
                      "name": "reveal_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "uids",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "values",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "salt",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "version_key",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": [
                        "---- Used to reveal the weights for a previously committed hash.",
                        "",
                        "# Args:",
                        "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                        "  - The signature of the revealing hotkey.",
                        "",
                        "* `netuid` (`u16`):",
                        "  - The u16 network identifier.",
                        "",
                        "* `uids` (`Vec<u16>`):",
                        "  - The uids for the weights being revealed.",
                        "",
                        "* `values` (`Vec<u16>`):",
                        "  - The values of the weights being revealed.",
                        "",
                        "* `salt` (`Vec<u16>`):",
                        "  - The salt used to generate the commit hash.",
                        "",
                        "* `version_key` (`u64`):",
                        "  - The network version key.",
                        "",
                        "# Raises:",
                        "* `CommitRevealDisabled`:",
                        "  - Attempting to reveal weights when the commit-reveal mechanism is disabled.",
                        "",
                        "* `NoWeightsCommitFound`:",
                        "  - Attempting to reveal weights without an existing commit.",
                        "",
                        "* `ExpiredWeightCommit`:",
                        "  - Attempting to reveal a weight commit that has expired.",
                        "",
                        "* `RevealTooEarly`:",
                        "  - Attempting to reveal weights outside the valid reveal period.",
                        "",
                        "* `InvalidRevealCommitHashNotMatch`:",
                        "  - The revealed hash does not match any committed hash.",
                        ""
                      ]
                    },
                    {
                      "name": "commit_crv3_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "commit",
                          "type": 194,
                          "typeName": "BoundedVec<u8, ConstU32<MAX_CRV3_COMMIT_SIZE_BYTES>>",
                          "docs": []
                        },
                        {
                          "name": "reveal_round",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": [
                        "---- Used to commit encrypted commit-reveal v3 weight values to later be revealed.",
                        "",
                        "# Args:",
                        "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                        "  - The committing hotkey.",
                        "",
                        "* `netuid` (`u16`):",
                        "  - The u16 network identifier.",
                        "",
                        "* `commit` (`Vec<u8>`):",
                        "  - The encrypted compressed commit.",
                        "    The steps for this are:",
                        "    1. Instantiate [`WeightsTlockPayload`]",
                        "    2. Serialize it using the `parity_scale_codec::Encode` trait",
                        "    3. Encrypt it following the steps (here)[https://github.com/ideal-lab5/tle/blob/f8e6019f0fb02c380ebfa6b30efb61786dede07b/timelock/src/tlock.rs#L283-L336]",
                        "       to produce a [`TLECiphertext<TinyBLS381>`] type.",
                        "    4. Serialize and compress using the `ark-serialize` `CanonicalSerialize` trait.",
                        "",
                        "* reveal_round (`u64`):",
                        "   - The drand reveal round which will be avaliable during epoch `n+1` from the current",
                        "     epoch.",
                        "",
                        "# Raises:",
                        "* `CommitRevealV3Disabled`:",
                        "  - Attempting to commit when the commit-reveal mechanism is disabled.",
                        "",
                        "* `TooManyUnrevealedCommits`:",
                        "  - Attempting to commit when the user has more than the allowed limit of unrevealed commits.",
                        ""
                      ]
                    },
                    {
                      "name": "batch_reveal_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "uids_list",
                          "type": 200,
                          "typeName": "Vec<Vec<u16>>",
                          "docs": []
                        },
                        {
                          "name": "values_list",
                          "type": 200,
                          "typeName": "Vec<Vec<u16>>",
                          "docs": []
                        },
                        {
                          "name": "salts_list",
                          "type": 200,
                          "typeName": "Vec<Vec<u16>>",
                          "docs": []
                        },
                        {
                          "name": "version_keys",
                          "type": 84,
                          "typeName": "Vec<u64>",
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": [
                        "---- The implementation for batch revealing committed weights.",
                        "",
                        "# Args:",
                        "* `origin`: (`<T as frame_system::Config>::RuntimeOrigin`):",
                        "  - The signature of the revealing hotkey.",
                        "",
                        "* `netuid` (`u16`):",
                        "  - The u16 network identifier.",
                        "",
                        "* `uids_list` (`Vec<Vec<u16>>`):",
                        "  - A list of uids for each set of weights being revealed.",
                        "",
                        "* `values_list` (`Vec<Vec<u16>>`):",
                        "  - A list of values for each set of weights being revealed.",
                        "",
                        "* `salts_list` (`Vec<Vec<u16>>`):",
                        "  - A list of salts used to generate the commit hashes.",
                        "",
                        "* `version_keys` (`Vec<u64>`):",
                        "  - A list of network version keys.",
                        "",
                        "# Raises:",
                        "* `CommitRevealDisabled`:",
                        "  - Attempting to reveal weights when the commit-reveal mechanism is disabled.",
                        "",
                        "* `NoWeightsCommitFound`:",
                        "  - Attempting to reveal weights without an existing commit.",
                        "",
                        "* `ExpiredWeightCommit`:",
                        "  - Attempting to reveal a weight commit that has expired.",
                        "",
                        "* `RevealTooEarly`:",
                        "  - Attempting to reveal weights outside the valid reveal period.",
                        "",
                        "* `InvalidRevealCommitHashNotMatch`:",
                        "  - The revealed hash does not match any committed hash.",
                        "",
                        "* `InvalidInputLengths`:",
                        "  - The input vectors are of mismatched lengths."
                      ]
                    },
                    {
                      "name": "set_tao_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dests",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "weights",
                          "type": 175,
                          "typeName": "Vec<u16>",
                          "docs": []
                        },
                        {
                          "name": "version_key",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "# Args:",
                        "* `origin`: (<T as frame_system::Config>Origin):",
                        "\t- The caller, a hotkey who wishes to set their weights.",
                        "",
                        "* `netuid` (u16):",
                        "\t- The network uid we are setting these weights on.",
                        "",
                        "* `hotkey` (T::AccountId):",
                        "\t- The hotkey associated with the operation and the calling coldkey.",
                        "",
                        "* `dests` (Vec<u16>):",
                        "\t- The edge endpoint for the weight, i.e. j for w_ij.",
                        "",
                        "* 'weights' (Vec<u16>):",
                        "\t- The u16 integer encoded weights. Interpreted as rational",
                        "\t\tvalues in the range [0,1]. They must sum to in32::MAX.",
                        "",
                        "* 'version_key' ( u64 ):",
                        "\t- The network version key to check if the validator is up to date.",
                        "",
                        "# Event:",
                        "",
                        "* WeightsSet;",
                        "\t- On successfully setting the weights on chain.",
                        "",
                        "# Raises:",
                        "",
                        "* NonAssociatedColdKey;",
                        "\t- Attempting to set weights on a non-associated cold key.",
                        "",
                        "* 'SubNetworkDoesNotExist':",
                        "\t- Attempting to set weights on a non-existent network.",
                        "",
                        "* 'NotRootSubnet':",
                        "\t- Attempting to set weights on a subnet that is not the root network.",
                        "",
                        "* 'WeightVecNotEqualSize':",
                        "\t- Attempting to set weights with uids not of same length.",
                        "",
                        "* 'UidVecContainInvalidOne':",
                        "\t- Attempting to set weights with invalid uids.",
                        "",
                        "* 'NotRegistered':",
                        "\t- Attempting to set weights from a non registered account.",
                        "",
                        "* 'WeightVecLengthIsLow':",
                        "\t- Attempting to set weights with fewer weights than min.",
                        "",
                        " * 'IncorrectWeightVersionKey':",
                        "     - Attempting to set weights with the incorrect network version key.",
                        "",
                        " * 'SettingWeightsTooFast':",
                        "     - Attempting to set weights too fast.",
                        "",
                        "* 'WeightVecLengthIsLow':",
                        "\t- Attempting to set weights with fewer weights than min.",
                        "",
                        "* 'MaxWeightExceeded':",
                        "\t- Attempting to set weights with max value exceeding limit.",
                        ""
                      ]
                    },
                    {
                      "name": "become_delegate",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "--- Sets the key as a delegate.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        "* 'hotkey' (T::AccountId):",
                        "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                        "",
                        "* 'take' (u64):",
                        "\t- The stake proportion that this hotkey takes from delegations.",
                        "",
                        "# Event:",
                        "* DelegateAdded;",
                        "\t- On successfully setting a hotkey as a delegate.",
                        "",
                        "# Raises:",
                        "* 'NotRegistered':",
                        "\t- The hotkey we are delegating is not registered on the network.",
                        "",
                        "* 'NonAssociatedColdKey':",
                        "\t- The hotkey we are delegating is not owned by the calling coldket.",
                        ""
                      ]
                    },
                    {
                      "name": "decrease_take",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": [
                        "--- Allows delegates to decrease its take value.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>::Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        "* 'hotkey' (T::AccountId):",
                        "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                        "",
                        "* 'netuid' (u16):",
                        "\t- Subnet ID to decrease take for",
                        "",
                        "* 'take' (u16):",
                        "\t- The new stake proportion that this hotkey takes from delegations.",
                        "       The new value can be between 0 and 11_796 and should be strictly",
                        "       lower than the previous value. It T is the new value (rational number),",
                        "       the the parameter is calculated as [65535 * T]. For example, 1% would be",
                        "       [0.01 * 65535] = [655.35] = 655",
                        "",
                        "# Event:",
                        "* TakeDecreased;",
                        "\t- On successfully setting a decreased take for this hotkey.",
                        "",
                        "# Raises:",
                        "* 'NotRegistered':",
                        "\t- The hotkey we are delegating is not registered on the network.",
                        "",
                        "* 'NonAssociatedColdKey':",
                        "\t- The hotkey we are delegating is not owned by the calling coldkey.",
                        "",
                        "* 'DelegateTakeTooLow':",
                        "\t- The delegate is setting a take which is not lower than the previous.",
                        ""
                      ]
                    },
                    {
                      "name": "increase_take",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": [
                        "--- Allows delegates to increase its take value. This call is rate-limited.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>::Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        "* 'hotkey' (T::AccountId):",
                        "\t- The hotkey we are delegating (must be owned by the coldkey.)",
                        "",
                        "* 'take' (u16):",
                        "\t- The new stake proportion that this hotkey takes from delegations.",
                        "       The new value can be between 0 and 11_796 and should be strictly",
                        "       greater than the previous value. T is the new value (rational number),",
                        "       the the parameter is calculated as [65535 * T]. For example, 1% would be",
                        "       [0.01 * 65535] = [655.35] = 655",
                        "",
                        "# Event:",
                        "* TakeIncreased;",
                        "\t- On successfully setting a increased take for this hotkey.",
                        "",
                        "# Raises:",
                        "* 'NotRegistered':",
                        "\t- The hotkey we are delegating is not registered on the network.",
                        "",
                        "* 'NonAssociatedColdKey':",
                        "\t- The hotkey we are delegating is not owned by the calling coldkey.",
                        "",
                        "* 'DelegateTakeTooHigh':",
                        "\t- The delegate is setting a take which is not greater than the previous.",
                        ""
                      ]
                    },
                    {
                      "name": "add_stake",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "amount_staked",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "--- Adds stake to a hotkey. The call is made from the",
                        "coldkey account linked in the hotkey.",
                        "Only the associated coldkey is allowed to make staking and",
                        "unstaking requests. This protects the neuron against",
                        "attacks on its hotkey running in production code.",
                        "",
                        "# Args:",
                        " * 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        " * 'hotkey' (T::AccountId):",
                        "\t- The associated hotkey account.",
                        "",
                        " * 'amount_staked' (u64):",
                        "\t- The amount of stake to be added to the hotkey staking account.",
                        "",
                        "# Event:",
                        " * StakeAdded;",
                        "\t- On the successfully adding stake to a global account.",
                        "",
                        "# Raises:",
                        " * 'NotEnoughBalanceToStake':",
                        "\t- Not enough balance on the coldkey to add onto the global account.",
                        "",
                        " * 'NonAssociatedColdKey':",
                        "\t- The calling coldkey is not associated with this hotkey.",
                        "",
                        " * 'BalanceWithdrawalError':",
                        " \t- Errors stemming from transaction pallet.",
                        ""
                      ]
                    },
                    {
                      "name": "remove_stake",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "amount_unstaked",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove stake from the staking account. The call must be made",
                        "from the coldkey account attached to the neuron metadata. Only this key",
                        "has permission to make staking and unstaking requests.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        "* 'hotkey' (T::AccountId):",
                        "\t- The associated hotkey account.",
                        "",
                        "* 'amount_unstaked' (u64):",
                        "\t- The amount of stake to be added to the hotkey staking account.",
                        "",
                        "# Event:",
                        "* StakeRemoved;",
                        "\t- On the successfully removing stake from the hotkey account.",
                        "",
                        "# Raises:",
                        "* 'NotRegistered':",
                        "\t- Thrown if the account we are attempting to unstake from is non existent.",
                        "",
                        "* 'NonAssociatedColdKey':",
                        "\t- Thrown if the coldkey does not own the hotkey we are unstaking from.",
                        "",
                        "* 'NotEnoughStakeToWithdraw':",
                        "\t- Thrown if there is not enough stake on the hotkey to withdwraw this amount.",
                        ""
                      ]
                    },
                    {
                      "name": "serve_axon",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ip",
                          "type": 8,
                          "typeName": "u128",
                          "docs": []
                        },
                        {
                          "name": "port",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "ip_type",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "protocol",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "placeholder1",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "placeholder2",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Serves or updates axon /prometheus information for the neuron associated with the caller. If the caller is",
                        "already registered the metadata is updated. If the caller is not registered this call throws NotRegistered.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller.",
                        "",
                        "* 'netuid' (u16):",
                        "\t- The u16 network identifier.",
                        "",
                        "* 'version' (u64):",
                        "\t- The bittensor version identifier.",
                        "",
                        "* 'ip' (u64):",
                        "\t- The endpoint ip information as a u128 encoded integer.",
                        "",
                        "* 'port' (u16):",
                        "\t- The endpoint port information as a u16 encoded integer.",
                        "",
                        "* 'ip_type' (u8):",
                        "\t- The endpoint ip version as a u8, 4 or 6.",
                        "",
                        "* 'protocol' (u8):",
                        "\t- UDP:1 or TCP:0",
                        "",
                        "* 'placeholder1' (u8):",
                        "\t- Placeholder for further extra params.",
                        "",
                        "* 'placeholder2' (u8):",
                        "\t- Placeholder for further extra params.",
                        "",
                        "# Event:",
                        "* AxonServed;",
                        "\t- On successfully serving the axon info.",
                        "",
                        "# Raises:",
                        "* 'SubNetworkDoesNotExist':",
                        "\t- Attempting to set weights on a non-existent network.",
                        "",
                        "* 'NotRegistered':",
                        "\t- Attempting to set weights from a non registered account.",
                        "",
                        "* 'InvalidIpType':",
                        "\t- The ip type is not 4 or 6.",
                        "",
                        "* 'InvalidIpAddress':",
                        "\t- The numerically encoded ip address does not resolve to a proper ip.",
                        "",
                        "* 'ServingRateLimitExceeded':",
                        "\t- Attempting to set prometheus information withing the rate limit min.",
                        ""
                      ]
                    },
                    {
                      "name": "serve_axon_tls",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ip",
                          "type": 8,
                          "typeName": "u128",
                          "docs": []
                        },
                        {
                          "name": "port",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "ip_type",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "protocol",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "placeholder1",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "placeholder2",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "certificate",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": [
                        "Same as `serve_axon` but takes a certificate as an extra optional argument.",
                        "Serves or updates axon /prometheus information for the neuron associated with the caller. If the caller is",
                        "already registered the metadata is updated. If the caller is not registered this call throws NotRegistered.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller.",
                        "",
                        "* 'netuid' (u16):",
                        "\t- The u16 network identifier.",
                        "",
                        "* 'version' (u64):",
                        "\t- The bittensor version identifier.",
                        "",
                        "* 'ip' (u64):",
                        "\t- The endpoint ip information as a u128 encoded integer.",
                        "",
                        "* 'port' (u16):",
                        "\t- The endpoint port information as a u16 encoded integer.",
                        "",
                        "* 'ip_type' (u8):",
                        "\t- The endpoint ip version as a u8, 4 or 6.",
                        "",
                        "* 'protocol' (u8):",
                        "\t- UDP:1 or TCP:0",
                        "",
                        "* 'placeholder1' (u8):",
                        "\t- Placeholder for further extra params.",
                        "",
                        "* 'placeholder2' (u8):",
                        "\t- Placeholder for further extra params.",
                        "",
                        "* 'certificate' (Vec<u8>):",
                        "    - TLS certificate for inter neuron communitation.",
                        "",
                        "# Event:",
                        "* AxonServed;",
                        "\t- On successfully serving the axon info.",
                        "",
                        "# Raises:",
                        "* 'SubNetworkDoesNotExist':",
                        "\t- Attempting to set weights on a non-existent network.",
                        "",
                        "* 'NotRegistered':",
                        "\t- Attempting to set weights from a non registered account.",
                        "",
                        "* 'InvalidIpType':",
                        "\t- The ip type is not 4 or 6.",
                        "",
                        "* 'InvalidIpAddress':",
                        "\t- The numerically encoded ip address does not resolve to a proper ip.",
                        "",
                        "* 'ServingRateLimitExceeded':",
                        "\t- Attempting to set prometheus information withing the rate limit min.",
                        ""
                      ]
                    },
                    {
                      "name": "serve_prometheus",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "ip",
                          "type": 8,
                          "typeName": "u128",
                          "docs": []
                        },
                        {
                          "name": "port",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "ip_type",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "---- Set prometheus information for the neuron.",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the calling hotkey.",
                        "",
                        "* 'netuid' (u16):",
                        "\t- The u16 network identifier.",
                        "",
                        "* 'version' (u16):",
                        "\t-  The bittensor version identifier.",
                        "",
                        "* 'ip' (u128):",
                        "\t- The prometheus ip information as a u128 encoded integer.",
                        "",
                        "* 'port' (u16):",
                        "\t- The prometheus port information as a u16 encoded integer.",
                        "",
                        "* 'ip_type' (u8):",
                        "\t- The ip type v4 or v6.",
                        ""
                      ]
                    },
                    {
                      "name": "register",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "block_number",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "work",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "---- Registers a new neuron to the subnetwork.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the calling hotkey.",
                        "",
                        "* 'netuid' (u16):",
                        "\t- The u16 network identifier.",
                        "",
                        "* 'block_number' ( u64 ):",
                        "\t- Block hash used to prove work done.",
                        "",
                        "* 'nonce' ( u64 ):",
                        "\t- Positive integer nonce used in POW.",
                        "",
                        "* 'work' ( Vec<u8> ):",
                        "\t- Vector encoded bytes representing work done.",
                        "",
                        "* 'hotkey' ( T::AccountId ):",
                        "\t- Hotkey to be registered to the network.",
                        "",
                        "* 'coldkey' ( T::AccountId ):",
                        "\t- Associated coldkey account.",
                        "",
                        "# Event:",
                        "* NeuronRegistered;",
                        "\t- On successfully registering a uid to a neuron slot on a subnetwork.",
                        "",
                        "# Raises:",
                        "* 'SubNetworkDoesNotExist':",
                        "\t- Attempting to register to a non existent network.",
                        "",
                        "* 'TooManyRegistrationsThisBlock':",
                        "\t- This registration exceeds the total allowed on this network this block.",
                        "",
                        "* 'HotKeyAlreadyRegisteredInSubNet':",
                        "\t- The hotkey is already registered on this network.",
                        "",
                        "* 'InvalidWorkBlock':",
                        "\t- The work has been performed on a stale, future, or non existent block.",
                        "",
                        "* 'InvalidDifficulty':",
                        "\t- The work does not match the difficulty.",
                        "",
                        "* 'InvalidSeal':",
                        "\t- The seal is incorrect.",
                        ""
                      ]
                    },
                    {
                      "name": "root_register",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": [
                        "Register the hotkey to root network"
                      ]
                    },
                    {
                      "name": "adjust_senate",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": [
                        "Attempt to adjust the senate membership to include a hotkey"
                      ]
                    },
                    {
                      "name": "burned_register",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "User register a new subnetwork via burning token"
                      ]
                    },
                    {
                      "name": "swap_hotkey",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new_hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": [
                        "The extrinsic for user to change its hotkey"
                      ]
                    },
                    {
                      "name": "swap_coldkey",
                      "fields": [
                        {
                          "name": "old_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "new_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "swap_cost",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": [
                        "The extrinsic for user to change the coldkey associated with their account.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - The origin of the call, must be signed by the old coldkey.",
                        "* `old_coldkey` - The current coldkey associated with the account.",
                        "* `new_coldkey` - The new coldkey to be associated with the account.",
                        "",
                        "# Returns",
                        "",
                        "Returns a `DispatchResultWithPostInfo` indicating success or failure of the operation.",
                        "",
                        "# Weight",
                        "",
                        "Weight is calculated based on the number of database reads and writes."
                      ]
                    },
                    {
                      "name": "set_childkey_take",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": [
                        "Sets the childkey take for a given hotkey.",
                        "",
                        "This function allows a coldkey to set the childkey take for a given hotkey.",
                        "The childkey take determines the proportion of stake that the hotkey keeps for itself",
                        "when distributing stake to its children.",
                        "",
                        "# Arguments:",
                        "* `origin` (<T as frame_system::Config>::RuntimeOrigin):",
                        "    - The signature of the calling coldkey. Setting childkey take can only be done by the coldkey.",
                        "",
                        "* `hotkey` (T::AccountId):",
                        "    - The hotkey for which the childkey take will be set.",
                        "",
                        "* `take` (u16):",
                        "    - The new childkey take value. This is a percentage represented as a value between 0 and 10000,",
                        "      where 10000 represents 100%.",
                        "",
                        "# Events:",
                        "* `ChildkeyTakeSet`:",
                        "    - On successfully setting the childkey take for a hotkey.",
                        "",
                        "# Errors:",
                        "* `NonAssociatedColdKey`:",
                        "    - The coldkey does not own the hotkey.",
                        "* `InvalidChildkeyTake`:",
                        "    - The provided take value is invalid (greater than the maximum allowed take).",
                        "* `TxChildkeyTakeRateLimitExceeded`:",
                        "    - The rate limit for changing childkey take has been exceeded.",
                        ""
                      ]
                    },
                    {
                      "name": "sudo_set_tx_childkey_take_rate_limit",
                      "fields": [
                        {
                          "name": "tx_rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": [
                        "Sets the transaction rate limit for changing childkey take.",
                        "",
                        "This function can only be called by the root origin.",
                        "",
                        "# Arguments:",
                        "* `origin` - The origin of the call, must be root.",
                        "* `tx_rate_limit` - The new rate limit in blocks.",
                        "",
                        "# Errors:",
                        "* `BadOrigin` - If the origin is not root.",
                        ""
                      ]
                    },
                    {
                      "name": "sudo_set_min_childkey_take",
                      "fields": [
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": [
                        "Sets the minimum allowed childkey take.",
                        "",
                        "This function can only be called by the root origin.",
                        "",
                        "# Arguments:",
                        "* `origin` - The origin of the call, must be root.",
                        "* `take` - The new minimum childkey take value.",
                        "",
                        "# Errors:",
                        "* `BadOrigin` - If the origin is not root.",
                        ""
                      ]
                    },
                    {
                      "name": "sudo_set_max_childkey_take",
                      "fields": [
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": [
                        "Sets the maximum allowed childkey take.",
                        "",
                        "This function can only be called by the root origin.",
                        "",
                        "# Arguments:",
                        "* `origin` - The origin of the call, must be root.",
                        "* `take` - The new maximum childkey take value.",
                        "",
                        "# Errors:",
                        "* `BadOrigin` - If the origin is not root.",
                        ""
                      ]
                    },
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<T::SudoRuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": [
                        "Authenticates a council proposal and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be a council majority.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<T::SudoRuntimeCall>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": [
                        "Authenticates a council proposal and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be a council majority.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": [
                        "User vote on a proposal"
                      ]
                    },
                    {
                      "name": "register_network",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": [
                        "User register a new subnetwork"
                      ]
                    },
                    {
                      "name": "faucet",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "work",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": [
                        "Facility extrinsic for user to get taken from faucet",
                        "It is only available when pow-faucet feature enabled",
                        "Just deployed in testnet and devnet for testing purpose"
                      ]
                    },
                    {
                      "name": "dissolve_network",
                      "fields": [
                        {
                          "name": "coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": [
                        "Remove a user's subnetwork",
                        "The caller must be the owner of the network"
                      ]
                    },
                    {
                      "name": "set_children",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "children",
                          "type": 43,
                          "typeName": "Vec<(u64, T::AccountId)>",
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": [
                        "Set a single child for a given hotkey on a specified network.",
                        "",
                        "This function allows a coldkey to set a single child for a given hotkey on a specified network.",
                        "The proportion of the hotkey's stake to be allocated to the child is also specified.",
                        "",
                        "# Arguments:",
                        "* `origin` (<T as frame_system::Config>::RuntimeOrigin):",
                        "    - The signature of the calling coldkey. Setting a hotkey child can only be done by the coldkey.",
                        "",
                        "* `hotkey` (T::AccountId):",
                        "    - The hotkey which will be assigned the child.",
                        "",
                        "* `child` (T::AccountId):",
                        "    - The child which will be assigned to the hotkey.",
                        "",
                        "* `netuid` (u16):",
                        "    - The u16 network identifier where the childkey will exist.",
                        "",
                        "* `proportion` (u64):",
                        "    - Proportion of the hotkey's stake to be given to the child, the value must be u64 normalized.",
                        "",
                        "# Events:",
                        "* `ChildAddedSingular`:",
                        "    - On successfully registering a child to a hotkey.",
                        "",
                        "# Errors:",
                        "* `SubNetworkDoesNotExist`:",
                        "    - Attempting to register to a non-existent network.",
                        "* `RegistrationNotPermittedOnRootSubnet`:",
                        "    - Attempting to register a child on the root network.",
                        "* `NonAssociatedColdKey`:",
                        "    - The coldkey does not own the hotkey or the child is the same as the hotkey.",
                        "* `HotKeyAccountNotExists`:",
                        "    - The hotkey account does not exist.",
                        "",
                        "# Detailed Explanation of Checks:",
                        "1. **Signature Verification**: Ensures that the caller has signed the transaction, verifying the coldkey.",
                        "2. **Root Network Check**: Ensures that the delegation is not on the root network, as child hotkeys are not valid on the root.",
                        "3. **Network Existence Check**: Ensures that the specified network exists.",
                        "4. **Ownership Verification**: Ensures that the coldkey owns the hotkey.",
                        "5. **Hotkey Account Existence Check**: Ensures that the hotkey account already exists.",
                        "6. **Child-Hotkey Distinction**: Ensures that the child is not the same as the hotkey.",
                        "7. **Old Children Cleanup**: Removes the hotkey from the parent list of its old children.",
                        "8. **New Children Assignment**: Assigns the new child to the hotkey and updates the parent list for the new child."
                      ]
                    },
                    {
                      "name": "schedule_swap_coldkey",
                      "fields": [
                        {
                          "name": "new_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": [
                        "Schedules a coldkey swap operation to be executed at a future block.",
                        "",
                        "This function allows a user to schedule the swapping of their coldkey to a new one",
                        "at a specified future block. The swap is not executed immediately but is scheduled",
                        "to occur at the specified block number.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - The origin of the call, which should be signed by the current coldkey owner.",
                        "* `new_coldkey` - The account ID of the new coldkey that will replace the current one.",
                        "* `when` - The block number at which the coldkey swap should be executed.",
                        "",
                        "# Returns",
                        "",
                        "Returns a `DispatchResultWithPostInfo` indicating whether the scheduling was successful.",
                        "",
                        "# Errors",
                        "",
                        "This function may return an error if:",
                        "* The origin is not signed.",
                        "* The scheduling fails due to conflicts or system constraints.",
                        "",
                        "# Notes",
                        "",
                        "- The actual swap is not performed by this function. It merely schedules the swap operation.",
                        "- The weight of this call is set to a fixed value and may need adjustment based on benchmarking.",
                        "",
                        "# TODO",
                        "",
                        "- Implement proper weight calculation based on the complexity of the operation.",
                        "- Consider adding checks to prevent scheduling too far into the future.",
                        "TODO: Benchmark this call"
                      ]
                    },
                    {
                      "name": "schedule_dissolve_network",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": [
                        "Schedule the dissolution of a network at a specified block number.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - The origin of the call, must be signed by the sender.",
                        "* `netuid` - The u16 network identifier to be dissolved.",
                        "",
                        "# Returns",
                        "",
                        "Returns a `DispatchResultWithPostInfo` indicating success or failure of the operation.",
                        "",
                        "# Weight",
                        "",
                        "Weight is calculated based on the number of database reads and writes."
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "url",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "github_repo",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "image",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "discord",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "additional",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": [
                        "---- Set prometheus information for the neuron.",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the calling hotkey.",
                        "",
                        "* 'netuid' (u16):",
                        "\t- The u16 network identifier.",
                        "",
                        "* 'version' (u16):",
                        "\t-  The bittensor version identifier.",
                        "",
                        "* 'ip' (u128):",
                        "\t- The prometheus ip information as a u128 encoded integer.",
                        "",
                        "* 'port' (u16):",
                        "\t- The prometheus port information as a u16 encoded integer.",
                        "",
                        "* 'ip_type' (u8):",
                        "\t- The ip type v4 or v6.",
                        ""
                      ]
                    },
                    {
                      "name": "set_subnet_identity",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "subnet_name",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "github_repo",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "subnet_contact",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "subnet_url",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "discord",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "additional",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": [
                        "---- Set the identity information for a subnet.",
                        "# Args:",
                        "* `origin` - (<T as frame_system::Config>::Origin):",
                        "    - The signature of the calling coldkey, which must be the owner of the subnet.",
                        "",
                        "* `netuid` (u16):",
                        "    - The unique network identifier of the subnet.",
                        "",
                        "* `subnet_name` (Vec<u8>):",
                        "    - The name of the subnet.",
                        "",
                        "* `github_repo` (Vec<u8>):",
                        "    - The GitHub repository associated with the subnet identity.",
                        "",
                        "* `subnet_contact` (Vec<u8>):",
                        "    - The contact information for the subnet."
                      ]
                    },
                    {
                      "name": "register_network_with_identity",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "identity",
                          "type": 386,
                          "typeName": "Option<SubnetIdentityOfV2>",
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": [
                        "User register a new subnetwork"
                      ]
                    },
                    {
                      "name": "unstake_all",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": [
                        "---- The implementation for the extrinsic unstake_all: Removes all stake from a hotkey account across all subnets and adds it onto a coldkey.",
                        "",
                        "# Args:",
                        "* `origin` - (<T as frame_system::Config>::Origin):",
                        "    - The signature of the caller's coldkey.",
                        "",
                        "* `hotkey` (T::AccountId):",
                        "    - The associated hotkey account.",
                        "",
                        "# Event:",
                        "* StakeRemoved;",
                        "    - On the successfully removing stake from the hotkey account.",
                        "",
                        "# Raises:",
                        "* `NotRegistered`:",
                        "    - Thrown if the account we are attempting to unstake from is non existent.",
                        "",
                        "* `NonAssociatedColdKey`:",
                        "    - Thrown if the coldkey does not own the hotkey we are unstaking from.",
                        "",
                        "* `NotEnoughStakeToWithdraw`:",
                        "    - Thrown if there is not enough stake on the hotkey to withdraw this amount.",
                        "",
                        "* `TxRateLimitExceeded`:",
                        "    - Thrown if key has hit transaction rate limit"
                      ]
                    },
                    {
                      "name": "unstake_all_alpha",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": [
                        "---- The implementation for the extrinsic unstake_all: Removes all stake from a hotkey account across all subnets and adds it onto a coldkey.",
                        "",
                        "# Args:",
                        "* `origin` - (<T as frame_system::Config>::Origin):",
                        "    - The signature of the caller's coldkey.",
                        "",
                        "* `hotkey` (T::AccountId):",
                        "    - The associated hotkey account.",
                        "",
                        "# Event:",
                        "* StakeRemoved;",
                        "    - On the successfully removing stake from the hotkey account.",
                        "",
                        "# Raises:",
                        "* `NotRegistered`:",
                        "    - Thrown if the account we are attempting to unstake from is non existent.",
                        "",
                        "* `NonAssociatedColdKey`:",
                        "    - Thrown if the coldkey does not own the hotkey we are unstaking from.",
                        "",
                        "* `NotEnoughStakeToWithdraw`:",
                        "    - Thrown if there is not enough stake on the hotkey to withdraw this amount.",
                        "",
                        "* `TxRateLimitExceeded`:",
                        "    - Thrown if key has hit transaction rate limit"
                      ]
                    },
                    {
                      "name": "move_stake",
                      "fields": [
                        {
                          "name": "origin_hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "destination_hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "origin_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "destination_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_amount",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": [
                        "---- The implementation for the extrinsic move_stake: Moves specified amount of stake from a hotkey to another across subnets.",
                        "",
                        "# Args:",
                        "* `origin` - (<T as frame_system::Config>::Origin):",
                        "    - The signature of the caller's coldkey.",
                        "",
                        "* `origin_hotkey` (T::AccountId):",
                        "    - The hotkey account to move stake from.",
                        "",
                        "* `destination_hotkey` (T::AccountId):",
                        "    - The hotkey account to move stake to.",
                        "",
                        "* `origin_netuid` (T::AccountId):",
                        "    - The subnet ID to move stake from.",
                        "",
                        "* `destination_netuid` (T::AccountId):",
                        "    - The subnet ID to move stake to.",
                        "",
                        "* `alpha_amount` (T::AccountId):",
                        "    - The alpha stake amount to move.",
                        ""
                      ]
                    },
                    {
                      "name": "transfer_stake",
                      "fields": [
                        {
                          "name": "destination_coldkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "origin_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "destination_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_amount",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": [
                        "Transfers a specified amount of stake from one coldkey to another, optionally across subnets,",
                        "while keeping the same hotkey.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the transaction, which must be signed by the `origin_coldkey`.",
                        "* `destination_coldkey` - The coldkey to which the stake is transferred.",
                        "* `hotkey` - The hotkey associated with the stake.",
                        "* `origin_netuid` - The network/subnet ID to move stake from.",
                        "* `destination_netuid` - The network/subnet ID to move stake to (for cross-subnet transfer).",
                        "* `alpha_amount` - The amount of stake to transfer.",
                        "",
                        "# Errors",
                        "Returns an error if:",
                        "* The origin is not signed by the correct coldkey.",
                        "* Either subnet does not exist.",
                        "* The hotkey does not exist.",
                        "* There is insufficient stake on `(origin_coldkey, hotkey, origin_netuid)`.",
                        "* The transfer amount is below the minimum stake requirement.",
                        "",
                        "# Events",
                        "May emit a `StakeTransferred` event on success."
                      ]
                    },
                    {
                      "name": "swap_stake",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "origin_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "destination_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_amount",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": [
                        "Swaps a specified amount of stake from one subnet to another, while keeping the same coldkey and hotkey.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the transaction, which must be signed by the coldkey that owns the `hotkey`.",
                        "* `hotkey` - The hotkey whose stake is being swapped.",
                        "* `origin_netuid` - The network/subnet ID from which stake is removed.",
                        "* `destination_netuid` - The network/subnet ID to which stake is added.",
                        "* `alpha_amount` - The amount of stake to swap.",
                        "",
                        "# Errors",
                        "Returns an error if:",
                        "* The transaction is not signed by the correct coldkey (i.e., `coldkey_owns_hotkey` fails).",
                        "* Either `origin_netuid` or `destination_netuid` does not exist.",
                        "* The hotkey does not exist.",
                        "* There is insufficient stake on `(coldkey, hotkey, origin_netuid)`.",
                        "* The swap amount is below the minimum stake requirement.",
                        "",
                        "# Events",
                        "May emit a `StakeSwapped` event on success."
                      ]
                    },
                    {
                      "name": "add_stake_limit",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "amount_staked",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "limit_price",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "allow_partial",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": [
                        "--- Adds stake to a hotkey on a subnet with a price limit.",
                        "This extrinsic allows to specify the limit price for alpha token",
                        "at which or better (lower) the staking should execute.",
                        "",
                        "In case if slippage occurs and the price shall move beyond the limit",
                        "price, the staking order may execute only partially or not execute",
                        "at all.",
                        "",
                        "# Args:",
                        " * 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        " * 'hotkey' (T::AccountId):",
                        "\t- The associated hotkey account.",
                        "",
                        " * 'amount_staked' (u64):",
                        "\t- The amount of stake to be added to the hotkey staking account.",
                        "",
                        " * 'limit_price' (u64):",
                        "\t- The limit price expressed in units of RAO per one Alpha.",
                        "",
                        " * 'allow_partial' (bool):",
                        "\t- Allows partial execution of the amount. If set to false, this becomes",
                        "      fill or kill type or order.",
                        "",
                        "# Event:",
                        " * StakeAdded;",
                        "\t- On the successfully adding stake to a global account.",
                        "",
                        "# Raises:",
                        " * 'NotEnoughBalanceToStake':",
                        "\t- Not enough balance on the coldkey to add onto the global account.",
                        "",
                        " * 'NonAssociatedColdKey':",
                        "\t- The calling coldkey is not associated with this hotkey.",
                        "",
                        " * 'BalanceWithdrawalError':",
                        " \t- Errors stemming from transaction pallet.",
                        ""
                      ]
                    },
                    {
                      "name": "remove_stake_limit",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "amount_unstaked",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "limit_price",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "allow_partial",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": [
                        "--- Removes stake from a hotkey on a subnet with a price limit.",
                        "This extrinsic allows to specify the limit price for alpha token",
                        "at which or better (higher) the staking should execute.",
                        "",
                        "In case if slippage occurs and the price shall move beyond the limit",
                        "price, the staking order may execute only partially or not execute",
                        "at all.",
                        "",
                        "# Args:",
                        "* 'origin': (<T as frame_system::Config>Origin):",
                        "\t- The signature of the caller's coldkey.",
                        "",
                        "* 'hotkey' (T::AccountId):",
                        "\t- The associated hotkey account.",
                        "",
                        "* 'amount_unstaked' (u64):",
                        "\t- The amount of stake to be added to the hotkey staking account.",
                        "",
                        " * 'limit_price' (u64):",
                        "    - The limit price expressed in units of RAO per one Alpha.",
                        "",
                        " * 'allow_partial' (bool):",
                        "    - Allows partial execution of the amount. If set to false, this becomes",
                        "      fill or kill type or order.",
                        "",
                        "# Event:",
                        "* StakeRemoved;",
                        "\t- On the successfully removing stake from the hotkey account.",
                        "",
                        "# Raises:",
                        "* 'NotRegistered':",
                        "\t- Thrown if the account we are attempting to unstake from is non existent.",
                        "",
                        "* 'NonAssociatedColdKey':",
                        "\t- Thrown if the coldkey does not own the hotkey we are unstaking from.",
                        "",
                        "* 'NotEnoughStakeToWithdraw':",
                        "\t- Thrown if there is not enough stake on the hotkey to withdwraw this amount.",
                        ""
                      ]
                    },
                    {
                      "name": "swap_stake_limit",
                      "fields": [
                        {
                          "name": "hotkey",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "origin_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "destination_netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_amount",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "limit_price",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "allow_partial",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": [
                        "Swaps a specified amount of stake from one subnet to another, while keeping the same coldkey and hotkey.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the transaction, which must be signed by the coldkey that owns the `hotkey`.",
                        "* `hotkey` - The hotkey whose stake is being swapped.",
                        "* `origin_netuid` - The network/subnet ID from which stake is removed.",
                        "* `destination_netuid` - The network/subnet ID to which stake is added.",
                        "* `alpha_amount` - The amount of stake to swap.",
                        "* `limit_price` - The limit price expressed in units of RAO per one Alpha.",
                        "* `allow_partial` - Allows partial execution of the amount. If set to false, this becomes fill or kill type or order.",
                        "",
                        "# Errors",
                        "Returns an error if:",
                        "* The transaction is not signed by the correct coldkey (i.e., `coldkey_owns_hotkey` fails).",
                        "* Either `origin_netuid` or `destination_netuid` does not exist.",
                        "* The hotkey does not exist.",
                        "* There is insufficient stake on `(coldkey, hotkey, origin_netuid)`.",
                        "* The swap amount is below the minimum stake requirement.",
                        "",
                        "# Events",
                        "May emit a `StakeSwapped` event on success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchable functions allow users to interact with the pallet and invoke state changes.",
                "These functions materialize as \"extrinsics\", which are often compared to transactions.",
                "Dispatchable functions must be annotated with a weight and must return a DispatchResult."
              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 197
                }
              },
              "docs": []
            }
          },
          {
            "id": 197,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 198
                }
              },
              "docs": []
            }
          },
          {
            "id": 198,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  47,
                  47
                ]
              },
              "docs": []
            }
          },
          {
            "id": 199,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 12
                }
              },
              "docs": []
            }
          },
          {
            "id": 200,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 175
                }
              },
              "docs": []
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "RuntimeCall"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 90,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 108,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 117,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 148,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "SubtensorModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 195,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SubtensorModule, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Triumvirate",
                      "fields": [
                        {
                          "name": null,
                          "type": 202,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Triumvirate, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "TriumvirateMembers",
                      "fields": [
                        {
                          "name": null,
                          "type": 203,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TriumvirateMembers, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "SenateMembers",
                      "fields": [
                        {
                          "name": null,
                          "type": 204,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SenateMembers, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 205,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 211,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 212,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 214,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 215,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 217,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Registry",
                      "fields": [
                        {
                          "name": null,
                          "type": 219,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registry, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Commitments",
                      "fields": [
                        {
                          "name": null,
                          "type": 286,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Commitments, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "AdminUtils",
                      "fields": [
                        {
                          "name": null,
                          "type": 355,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AdminUtils, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "SafeMode",
                      "fields": [
                        {
                          "name": null,
                          "type": 356,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SafeMode, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 357,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 367,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 372,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Drand",
                      "fields": [
                        {
                          "name": null,
                          "type": 373,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Drand, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 42,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "The dispatch of this call must be `SetMembersOrigin`.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "## Complexity:",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 201,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "## Complexity:",
                        "- `O(B + M + P)` where:",
                        "- `B` is `proposal` size in bytes (length-fee-bounded)",
                        "- `M` members-count (code-bounded)",
                        "- `P` complexity of dispatching `proposal`"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 201,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "## Complexity",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "## Complexity",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "## Complexity",
                        "O(P) where P is the number of max proposals"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 88,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 88,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "## Complexity",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 206,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched.",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 206,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 207,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 206,
                          "typeName": "Vec<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 206,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 201
                }
              },
              "docs": []
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "OriginCaller"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 208,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Triumvirate",
                      "fields": [
                        {
                          "name": null,
                          "type": 209,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 210,
                          "typeName": "pallet_ethereum::Origin",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "pallet_ethereum",
                "RawOrigin"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "remove_key",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Permanently removes the sudo key.",
                        "",
                        "**This cannot be un-done.**"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "## Complexity",
                        "O(Z + C) where Z is the length of the call and C its execution weight."
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 213,
                          "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "## Complexity",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 213,
                          "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 151,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 54,
                          "typeName": "Timepoint<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 54
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 54,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage.",
                        "",
                        "If `len` is provided, then it will be a much cheaper operation.",
                        "",
                        "- `hash`: The hash of the preimage to be removed from the store.",
                        "- `len`: The length of the preimage of `hash`."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    },
                    {
                      "name": "ensure_updated",
                      "fields": [
                        {
                          "name": "hashes",
                          "type": 45,
                          "typeName": "Vec<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Ensure that the a bulk of pre-images is upgraded.",
                        "",
                        "The caller pays no fee if at least 90% of pre-images were successfully updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 216,
                          "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 216,
                          "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 216,
                          "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay."
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName",
                          "docs": []
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 216,
                          "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay."
                      ]
                    },
                    {
                      "name": "set_retry",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                        "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                        "succeeds.",
                        "",
                        "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                        "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                        "normally while the task is retrying.",
                        "",
                        "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                        "clones of the original task. Their retry configuration will be derived from the",
                        "original task's configuration, but will have a lower value for `remaining` than the",
                        "original `total_retries`."
                      ]
                    },
                    {
                      "name": "set_retry_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName",
                          "docs": []
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                        "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                        "it succeeds.",
                        "",
                        "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                        "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                        "normally while the task is retrying.",
                        "",
                        "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                        "clones of the original task. Their retry configuration will be derived from the",
                        "original task's configuration, but will have a lower value for `remaining` than the",
                        "original `total_retries`."
                      ]
                    },
                    {
                      "name": "cancel_retry",
                      "fields": [
                        {
                          "name": "task",
                          "type": 57,
                          "typeName": "TaskAddress<BlockNumberFor<T>>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Removes the retry configuration of a task."
                      ]
                    },
                    {
                      "name": "cancel_retry_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Cancel the retry configuration of a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 57
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 218,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero."
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `pure`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                      ]
                    },
                    {
                      "name": "create_pure",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit."
                      ]
                    },
                    {
                      "name": "kill_pure",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 60,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "height",
                          "type": 88,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "ext_index",
                          "type": 88,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned pure proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`pure` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `pure` to create this account.",
                        "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `pure`.",
                        "- `height`: The height of the chain when the call to `pure` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created pure",
                        "account whose `pure` call has corresponding parameters."
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made."
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "real",
                          "type": 149,
                          "typeName": "AccountIdLookupOf<T>",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 218,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 201,
                          "typeName": "Box<<T as Config>::RuntimeCall>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 60,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "pallet_registry",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "identified",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "info",
                          "type": 220,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register an identity for an account. This will overwrite any existing identity."
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "fields": [
                        {
                          "name": "identified",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear the identity of an account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "pallet_registry",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 221,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                      "docs": []
                    },
                    {
                      "name": "display",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "legal",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "web",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "riot",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "email",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 285,
                      "typeName": "Option<[u8; 20]>",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "twitter",
                      "type": 223,
                      "typeName": "Data",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 222
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 284,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 222,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  223,
                  223
                ]
              },
              "docs": []
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "pallet_registry",
                "types",
                "Data"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 224,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 225,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 226,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 227,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 228,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 229,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 230,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 231,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 232,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 233,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 234,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 235,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 236,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 237,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 238,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 239,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 240,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 242,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 243,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 244,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 245,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 246,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 247,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 248,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 249,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 250,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 251,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 252,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Raw33",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Raw34",
                      "fields": [
                        {
                          "name": null,
                          "type": 254,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Raw35",
                      "fields": [
                        {
                          "name": null,
                          "type": 255,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Raw36",
                      "fields": [
                        {
                          "name": null,
                          "type": 256,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Raw37",
                      "fields": [
                        {
                          "name": null,
                          "type": 257,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Raw38",
                      "fields": [
                        {
                          "name": null,
                          "type": 258,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Raw39",
                      "fields": [
                        {
                          "name": null,
                          "type": 259,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Raw40",
                      "fields": [
                        {
                          "name": null,
                          "type": 260,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Raw41",
                      "fields": [
                        {
                          "name": null,
                          "type": 261,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Raw42",
                      "fields": [
                        {
                          "name": null,
                          "type": 262,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Raw43",
                      "fields": [
                        {
                          "name": null,
                          "type": 263,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Raw44",
                      "fields": [
                        {
                          "name": null,
                          "type": 264,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Raw45",
                      "fields": [
                        {
                          "name": null,
                          "type": 265,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Raw46",
                      "fields": [
                        {
                          "name": null,
                          "type": 266,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Raw47",
                      "fields": [
                        {
                          "name": null,
                          "type": 267,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Raw48",
                      "fields": [
                        {
                          "name": null,
                          "type": 268,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Raw49",
                      "fields": [
                        {
                          "name": null,
                          "type": 269,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Raw50",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Raw51",
                      "fields": [
                        {
                          "name": null,
                          "type": 271,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Raw52",
                      "fields": [
                        {
                          "name": null,
                          "type": 272,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Raw53",
                      "fields": [
                        {
                          "name": null,
                          "type": 273,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Raw54",
                      "fields": [
                        {
                          "name": null,
                          "type": 274,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Raw55",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Raw56",
                      "fields": [
                        {
                          "name": null,
                          "type": 276,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Raw57",
                      "fields": [
                        {
                          "name": null,
                          "type": 277,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Raw58",
                      "fields": [
                        {
                          "name": null,
                          "type": 278,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Raw59",
                      "fields": [
                        {
                          "name": null,
                          "type": 279,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Raw60",
                      "fields": [
                        {
                          "name": null,
                          "type": 280,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Raw61",
                      "fields": [
                        {
                          "name": null,
                          "type": 281,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Raw62",
                      "fields": [
                        {
                          "name": null,
                          "type": 282,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Raw63",
                      "fields": [
                        {
                          "name": null,
                          "type": 283,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Raw64",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 224,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 225,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 226,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 227,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 228,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 229,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 230,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 231,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 232,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 233,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 234,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 235,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 236,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 237,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 238,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 239,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 240,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 241,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 242,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 243,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 244,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 245,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 246,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 247,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 248,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 249,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 250,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 251,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 252,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 253,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 254,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 34,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 255,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 35,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 256,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 36,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 257,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 37,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 258,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 38,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 259,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 39,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 260,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 40,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 261,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 41,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 262,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 42,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 263,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 43,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 264,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 44,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 265,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 45,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 266,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 46,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 267,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 47,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 268,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 48,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 269,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 49,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 270,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 50,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 271,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 51,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 272,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 52,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 273,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 53,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 274,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 54,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 275,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 55,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 276,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 56,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 277,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 57,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 278,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 58,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 279,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 59,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 280,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 60,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 281,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 61,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 282,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 62,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 283,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 63,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 284,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 222
                }
              },
              "docs": []
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 68
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "pallet_commitments",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_commitment",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "info",
                          "type": 287,
                          "typeName": "Box<CommitmentInfo<T::MaxFields>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the commitment for a given netuid"
                      ]
                    },
                    {
                      "name": "set_rate_limit",
                      "fields": [
                        {
                          "name": "rate_limit_blocks",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Sudo-set the commitment rate limit"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_commitments",
                "types",
                "CommitmentInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "fields",
                      "type": 288,
                      "typeName": "BoundedVec<Data, FieldLimit>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 289
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 354,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "pallet_commitments",
                "types",
                "Data"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 224,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 225,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 226,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 227,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 228,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 229,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 230,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 105,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 231,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 232,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 233,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 234,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 235,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 236,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 237,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 238,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 239,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 240,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 242,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 243,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 244,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 245,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 246,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 247,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 248,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 249,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 250,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 251,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 252,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Raw33",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Raw34",
                      "fields": [
                        {
                          "name": null,
                          "type": 254,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Raw35",
                      "fields": [
                        {
                          "name": null,
                          "type": 255,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Raw36",
                      "fields": [
                        {
                          "name": null,
                          "type": 256,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Raw37",
                      "fields": [
                        {
                          "name": null,
                          "type": 257,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Raw38",
                      "fields": [
                        {
                          "name": null,
                          "type": 258,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Raw39",
                      "fields": [
                        {
                          "name": null,
                          "type": 259,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Raw40",
                      "fields": [
                        {
                          "name": null,
                          "type": 260,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Raw41",
                      "fields": [
                        {
                          "name": null,
                          "type": 261,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Raw42",
                      "fields": [
                        {
                          "name": null,
                          "type": 262,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Raw43",
                      "fields": [
                        {
                          "name": null,
                          "type": 263,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Raw44",
                      "fields": [
                        {
                          "name": null,
                          "type": 264,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Raw45",
                      "fields": [
                        {
                          "name": null,
                          "type": 265,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Raw46",
                      "fields": [
                        {
                          "name": null,
                          "type": 266,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Raw47",
                      "fields": [
                        {
                          "name": null,
                          "type": 267,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Raw48",
                      "fields": [
                        {
                          "name": null,
                          "type": 268,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Raw49",
                      "fields": [
                        {
                          "name": null,
                          "type": 269,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Raw50",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Raw51",
                      "fields": [
                        {
                          "name": null,
                          "type": 271,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Raw52",
                      "fields": [
                        {
                          "name": null,
                          "type": 272,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Raw53",
                      "fields": [
                        {
                          "name": null,
                          "type": 273,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Raw54",
                      "fields": [
                        {
                          "name": null,
                          "type": 274,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Raw55",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Raw56",
                      "fields": [
                        {
                          "name": null,
                          "type": 276,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Raw57",
                      "fields": [
                        {
                          "name": null,
                          "type": 277,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Raw58",
                      "fields": [
                        {
                          "name": null,
                          "type": 278,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Raw59",
                      "fields": [
                        {
                          "name": null,
                          "type": 279,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Raw60",
                      "fields": [
                        {
                          "name": null,
                          "type": 280,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Raw61",
                      "fields": [
                        {
                          "name": null,
                          "type": 281,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Raw62",
                      "fields": [
                        {
                          "name": null,
                          "type": 282,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Raw63",
                      "fields": [
                        {
                          "name": null,
                          "type": 283,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Raw64",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Raw65",
                      "fields": [
                        {
                          "name": null,
                          "type": 290,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Raw66",
                      "fields": [
                        {
                          "name": null,
                          "type": 291,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Raw67",
                      "fields": [
                        {
                          "name": null,
                          "type": 292,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Raw68",
                      "fields": [
                        {
                          "name": null,
                          "type": 293,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Raw69",
                      "fields": [
                        {
                          "name": null,
                          "type": 294,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Raw70",
                      "fields": [
                        {
                          "name": null,
                          "type": 295,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Raw71",
                      "fields": [
                        {
                          "name": null,
                          "type": 296,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Raw72",
                      "fields": [
                        {
                          "name": null,
                          "type": 297,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Raw73",
                      "fields": [
                        {
                          "name": null,
                          "type": 298,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Raw74",
                      "fields": [
                        {
                          "name": null,
                          "type": 299,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Raw75",
                      "fields": [
                        {
                          "name": null,
                          "type": 300,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Raw76",
                      "fields": [
                        {
                          "name": null,
                          "type": 301,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Raw77",
                      "fields": [
                        {
                          "name": null,
                          "type": 302,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Raw78",
                      "fields": [
                        {
                          "name": null,
                          "type": 303,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Raw79",
                      "fields": [
                        {
                          "name": null,
                          "type": 304,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Raw80",
                      "fields": [
                        {
                          "name": null,
                          "type": 305,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Raw81",
                      "fields": [
                        {
                          "name": null,
                          "type": 306,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Raw82",
                      "fields": [
                        {
                          "name": null,
                          "type": 307,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Raw83",
                      "fields": [
                        {
                          "name": null,
                          "type": 308,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Raw84",
                      "fields": [
                        {
                          "name": null,
                          "type": 309,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Raw85",
                      "fields": [
                        {
                          "name": null,
                          "type": 310,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Raw86",
                      "fields": [
                        {
                          "name": null,
                          "type": 311,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Raw87",
                      "fields": [
                        {
                          "name": null,
                          "type": 312,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Raw88",
                      "fields": [
                        {
                          "name": null,
                          "type": 313,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Raw89",
                      "fields": [
                        {
                          "name": null,
                          "type": 314,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Raw90",
                      "fields": [
                        {
                          "name": null,
                          "type": 315,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Raw91",
                      "fields": [
                        {
                          "name": null,
                          "type": 316,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Raw92",
                      "fields": [
                        {
                          "name": null,
                          "type": 317,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Raw93",
                      "fields": [
                        {
                          "name": null,
                          "type": 318,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Raw94",
                      "fields": [
                        {
                          "name": null,
                          "type": 319,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Raw95",
                      "fields": [
                        {
                          "name": null,
                          "type": 320,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Raw96",
                      "fields": [
                        {
                          "name": null,
                          "type": 321,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Raw97",
                      "fields": [
                        {
                          "name": null,
                          "type": 322,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Raw98",
                      "fields": [
                        {
                          "name": null,
                          "type": 323,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Raw99",
                      "fields": [
                        {
                          "name": null,
                          "type": 324,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Raw100",
                      "fields": [
                        {
                          "name": null,
                          "type": 325,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Raw101",
                      "fields": [
                        {
                          "name": null,
                          "type": 326,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Raw102",
                      "fields": [
                        {
                          "name": null,
                          "type": 327,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Raw103",
                      "fields": [
                        {
                          "name": null,
                          "type": 328,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Raw104",
                      "fields": [
                        {
                          "name": null,
                          "type": 329,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Raw105",
                      "fields": [
                        {
                          "name": null,
                          "type": 330,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Raw106",
                      "fields": [
                        {
                          "name": null,
                          "type": 331,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Raw107",
                      "fields": [
                        {
                          "name": null,
                          "type": 332,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Raw108",
                      "fields": [
                        {
                          "name": null,
                          "type": 333,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Raw109",
                      "fields": [
                        {
                          "name": null,
                          "type": 334,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Raw110",
                      "fields": [
                        {
                          "name": null,
                          "type": 335,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Raw111",
                      "fields": [
                        {
                          "name": null,
                          "type": 336,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Raw112",
                      "fields": [
                        {
                          "name": null,
                          "type": 337,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Raw113",
                      "fields": [
                        {
                          "name": null,
                          "type": 338,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Raw114",
                      "fields": [
                        {
                          "name": null,
                          "type": 339,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Raw115",
                      "fields": [
                        {
                          "name": null,
                          "type": 340,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Raw116",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Raw117",
                      "fields": [
                        {
                          "name": null,
                          "type": 342,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Raw118",
                      "fields": [
                        {
                          "name": null,
                          "type": 343,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Raw119",
                      "fields": [
                        {
                          "name": null,
                          "type": 344,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Raw120",
                      "fields": [
                        {
                          "name": null,
                          "type": 345,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Raw121",
                      "fields": [
                        {
                          "name": null,
                          "type": 346,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Raw122",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Raw123",
                      "fields": [
                        {
                          "name": null,
                          "type": 348,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Raw124",
                      "fields": [
                        {
                          "name": null,
                          "type": 349,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Raw125",
                      "fields": [
                        {
                          "name": null,
                          "type": 350,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Raw126",
                      "fields": [
                        {
                          "name": null,
                          "type": 351,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Raw127",
                      "fields": [
                        {
                          "name": null,
                          "type": 352,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Raw128",
                      "fields": [
                        {
                          "name": null,
                          "type": 353,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 290,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 291,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 66,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 292,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 67,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 293,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 68,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 294,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 69,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 295,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 70,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 296,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 71,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 297,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 72,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 298,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 73,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 299,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 74,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 300,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 75,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 301,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 76,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 302,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 77,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 303,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 78,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 304,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 79,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 305,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 80,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 306,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 81,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 307,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 82,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 308,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 83,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 309,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 84,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 310,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 85,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 311,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 86,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 312,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 87,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 313,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 88,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 314,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 89,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 315,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 90,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 316,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 91,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 317,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 92,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 318,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 93,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 319,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 94,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 320,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 95,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 321,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 96,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 322,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 97,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 323,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 98,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 324,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 99,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 325,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 100,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 326,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 101,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 327,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 102,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 328,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 103,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 329,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 104,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 330,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 105,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 331,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 106,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 332,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 107,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 333,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 108,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 334,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 109,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 335,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 110,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 336,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 111,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 337,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 112,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 338,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 113,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 339,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 114,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 340,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 115,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 341,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 116,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 342,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 117,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 343,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 118,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 344,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 119,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 345,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 120,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 346,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 121,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 347,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 122,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 348,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 123,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 349,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 124,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 350,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 125,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 351,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 126,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 352,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 127,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 353,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 128,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 354,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 289
                }
              },
              "docs": []
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "pallet_admin_utils",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "swap_authorities",
                      "fields": [
                        {
                          "name": "new_authorities",
                          "type": 109,
                          "typeName": "BoundedVec<<T as Config>::AuthorityId, T::MaxAuthorities>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The extrinsic sets the new authorities for Aura consensus.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Aura pallet to change the authorities."
                      ]
                    },
                    {
                      "name": "sudo_set_default_take",
                      "fields": [
                        {
                          "name": "default_take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The extrinsic sets the default take for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the default take."
                      ]
                    },
                    {
                      "name": "sudo_set_tx_rate_limit",
                      "fields": [
                        {
                          "name": "tx_rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The extrinsic sets the transaction rate limit for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the transaction rate limit."
                      ]
                    },
                    {
                      "name": "sudo_set_serving_rate_limit",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "serving_rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The extrinsic sets the serving rate limit for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the serving rate limit."
                      ]
                    },
                    {
                      "name": "sudo_set_min_difficulty",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "min_difficulty",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The extrinsic sets the minimum difficulty for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the minimum difficulty."
                      ]
                    },
                    {
                      "name": "sudo_set_max_difficulty",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_difficulty",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The extrinsic sets the maximum difficulty for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the maximum difficulty."
                      ]
                    },
                    {
                      "name": "sudo_set_weights_version_key",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "weights_version_key",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The extrinsic sets the weights version key for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the weights version key."
                      ]
                    },
                    {
                      "name": "sudo_set_weights_set_rate_limit",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "weights_set_rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The extrinsic sets the weights set rate limit for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the weights set rate limit."
                      ]
                    },
                    {
                      "name": "sudo_set_adjustment_interval",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "adjustment_interval",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The extrinsic sets the adjustment interval for a subnet.",
                        "It is only callable by the root account, not changeable by the subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the adjustment interval."
                      ]
                    },
                    {
                      "name": "sudo_set_adjustment_alpha",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "adjustment_alpha",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "The extrinsic sets the adjustment alpha for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the adjustment alpha."
                      ]
                    },
                    {
                      "name": "sudo_set_max_weight_limit",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_weight_limit",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "The extrinsic sets the adjustment beta for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the adjustment beta."
                      ]
                    },
                    {
                      "name": "sudo_set_immunity_period",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "immunity_period",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The extrinsic sets the immunity period for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the immunity period."
                      ]
                    },
                    {
                      "name": "sudo_set_min_allowed_weights",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "min_allowed_weights",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "The extrinsic sets the minimum allowed weights for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the minimum allowed weights."
                      ]
                    },
                    {
                      "name": "sudo_set_max_allowed_uids",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_allowed_uids",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "The extrinsic sets the maximum allowed UIDs for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the maximum allowed UIDs for a subnet."
                      ]
                    },
                    {
                      "name": "sudo_set_kappa",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "kappa",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "The extrinsic sets the kappa for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the kappa."
                      ]
                    },
                    {
                      "name": "sudo_set_rho",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "rho",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "The extrinsic sets the rho for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the rho."
                      ]
                    },
                    {
                      "name": "sudo_set_activity_cutoff",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "activity_cutoff",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "The extrinsic sets the activity cutoff for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the activity cutoff."
                      ]
                    },
                    {
                      "name": "sudo_set_network_registration_allowed",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "registration_allowed",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "The extrinsic sets the network registration allowed for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the network registration allowed."
                      ]
                    },
                    {
                      "name": "sudo_set_network_pow_registration_allowed",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "registration_allowed",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "The extrinsic sets the network PoW registration allowed for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the network PoW registration allowed."
                      ]
                    },
                    {
                      "name": "sudo_set_target_registrations_per_interval",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "target_registrations_per_interval",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The extrinsic sets the target registrations per interval for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the target registrations per interval."
                      ]
                    },
                    {
                      "name": "sudo_set_min_burn",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "min_burn",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "The extrinsic sets the minimum burn for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the minimum burn."
                      ]
                    },
                    {
                      "name": "sudo_set_max_burn",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_burn",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "The extrinsic sets the maximum burn for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the maximum burn."
                      ]
                    },
                    {
                      "name": "sudo_set_difficulty",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "difficulty",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "The extrinsic sets the difficulty for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the difficulty."
                      ]
                    },
                    {
                      "name": "sudo_set_max_allowed_validators",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_allowed_validators",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "The extrinsic sets the maximum allowed validators for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the maximum allowed validators."
                      ]
                    },
                    {
                      "name": "sudo_set_bonds_moving_average",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "bonds_moving_average",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "The extrinsic sets the bonds moving average for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the bonds moving average."
                      ]
                    },
                    {
                      "name": "sudo_set_bonds_penalty",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "bonds_penalty",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": [
                        "The extrinsic sets the bonds penalty for a subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the bonds penalty."
                      ]
                    },
                    {
                      "name": "sudo_set_max_registrations_per_block",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_registrations_per_block",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "The extrinsic sets the maximum registrations per block for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the maximum registrations per block."
                      ]
                    },
                    {
                      "name": "sudo_set_subnet_owner_cut",
                      "fields": [
                        {
                          "name": "subnet_owner_cut",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "The extrinsic sets the subnet owner cut for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the subnet owner cut."
                      ]
                    },
                    {
                      "name": "sudo_set_network_rate_limit",
                      "fields": [
                        {
                          "name": "rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "The extrinsic sets the network rate limit for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the network rate limit."
                      ]
                    },
                    {
                      "name": "sudo_set_tempo",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "tempo",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "The extrinsic sets the tempo for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the tempo."
                      ]
                    },
                    {
                      "name": "sudo_set_total_issuance",
                      "fields": [
                        {
                          "name": "total_issuance",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "The extrinsic sets the total issuance for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the issuance for the network."
                      ]
                    },
                    {
                      "name": "sudo_set_network_immunity_period",
                      "fields": [
                        {
                          "name": "immunity_period",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "The extrinsic sets the immunity period for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the immunity period for the network."
                      ]
                    },
                    {
                      "name": "sudo_set_network_min_lock_cost",
                      "fields": [
                        {
                          "name": "lock_cost",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "The extrinsic sets the min lock cost for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the min lock cost for the network."
                      ]
                    },
                    {
                      "name": "sudo_set_subnet_limit",
                      "fields": [
                        {
                          "name": "max_subnets",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "The extrinsic sets the subnet limit for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the subnet limit."
                      ]
                    },
                    {
                      "name": "sudo_set_lock_reduction_interval",
                      "fields": [
                        {
                          "name": "interval",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "The extrinsic sets the lock reduction interval for the network.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the lock reduction interval."
                      ]
                    },
                    {
                      "name": "sudo_set_rao_recycled",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "rao_recycled",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": [
                        "The extrinsic sets the recycled RAO for a subnet.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the recycled RAO."
                      ]
                    },
                    {
                      "name": "sudo_set_stake_threshold",
                      "fields": [
                        {
                          "name": "min_stake",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": [
                        "The extrinsic sets the weights min stake.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the weights min stake."
                      ]
                    },
                    {
                      "name": "sudo_set_nominator_min_required_stake",
                      "fields": [
                        {
                          "name": "min_stake",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": [
                        "The extrinsic sets the minimum stake required for nominators.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the minimum stake required for nominators."
                      ]
                    },
                    {
                      "name": "sudo_set_tx_delegate_take_rate_limit",
                      "fields": [
                        {
                          "name": "tx_rate_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": [
                        "The extrinsic sets the rate limit for delegate take transactions.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the rate limit for delegate take transactions."
                      ]
                    },
                    {
                      "name": "sudo_set_min_delegate_take",
                      "fields": [
                        {
                          "name": "take",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": [
                        "The extrinsic sets the minimum delegate take.",
                        "It is only callable by the root account.",
                        "The extrinsic will call the Subtensor pallet to set the minimum delegate take."
                      ]
                    },
                    {
                      "name": "sudo_set_commit_reveal_weights_enabled",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "enabled",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": [
                        "The extrinsic enabled/disables commit/reaveal for a given subnet.",
                        "It is only callable by the root account or subnet owner.",
                        "The extrinsic will call the Subtensor pallet to set the value."
                      ]
                    },
                    {
                      "name": "sudo_set_liquid_alpha_enabled",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "enabled",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": [
                        "Enables or disables Liquid Alpha for a given subnet.",
                        "",
                        "# Parameters",
                        "- `origin`: The origin of the call, which must be the root account or subnet owner.",
                        "- `netuid`: The unique identifier for the subnet.",
                        "- `enabled`: A boolean flag to enable or disable Liquid Alpha.",
                        "",
                        "# Weight",
                        "This function has a fixed weight of 0 and is classified as an operational transaction that does not incur any fees."
                      ]
                    },
                    {
                      "name": "sudo_set_alpha_values",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_low",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "alpha_high",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": [
                        "Sets values for liquid alpha"
                      ]
                    },
                    {
                      "name": "sudo_set_network_max_stake",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "max_stake",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": [
                        "Sets the maximum stake allowed for a specific network.",
                        "",
                        "This function allows the root account to set the maximum stake for a given network.",
                        "It updates the network's maximum stake value and logs the change.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - The origin of the call, which must be the root account.",
                        "* `netuid` - The unique identifier of the network.",
                        "* `max_stake` - The new maximum stake value to set.",
                        "",
                        "# Returns",
                        "",
                        "Returns `Ok(())` if the operation is successful, or an error if it fails.",
                        "",
                        "# Example",
                        "",
                        "",
                        "# Notes",
                        "",
                        "- This function can only be called by the root account.",
                        "- The `netuid` should correspond to an existing network.",
                        "",
                        "# TODO",
                        ""
                      ]
                    },
                    {
                      "name": "sudo_set_coldkey_swap_schedule_duration",
                      "fields": [
                        {
                          "name": "duration",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": [
                        "Sets the duration of the coldkey swap schedule.",
                        "",
                        "This extrinsic allows the root account to set the duration for the coldkey swap schedule.",
                        "The coldkey swap schedule determines how long it takes for a coldkey swap operation to complete.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the call, which must be the root account.",
                        "* `duration` - The new duration for the coldkey swap schedule, in number of blocks.",
                        "",
                        "# Errors",
                        "* `BadOrigin` - If the caller is not the root account.",
                        "",
                        "# Weight",
                        "Weight is handled by the `#[pallet::weight]` attribute."
                      ]
                    },
                    {
                      "name": "sudo_set_dissolve_network_schedule_duration",
                      "fields": [
                        {
                          "name": "duration",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": [
                        "Sets the duration of the dissolve network schedule.",
                        "",
                        "This extrinsic allows the root account to set the duration for the dissolve network schedule.",
                        "The dissolve network schedule determines how long it takes for a network dissolution operation to complete.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the call, which must be the root account.",
                        "* `duration` - The new duration for the dissolve network schedule, in number of blocks.",
                        "",
                        "# Errors",
                        "* `BadOrigin` - If the caller is not the root account.",
                        "",
                        "# Weight",
                        "Weight is handled by the `#[pallet::weight]` attribute."
                      ]
                    },
                    {
                      "name": "sudo_set_commit_reveal_weights_interval",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "interval",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": [
                        "Sets the commit-reveal weights periods for a specific subnet.",
                        "",
                        "This extrinsic allows the subnet owner or root account to set the duration (in epochs) during which committed weights must be revealed.",
                        "The commit-reveal mechanism ensures that users commit weights in advance and reveal them only within a specified period.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the call, which must be the subnet owner or the root account.",
                        "* `netuid` - The unique identifier of the subnet for which the periods are being set.",
                        "* `periods` - The number of epochs that define the commit-reveal period.",
                        "",
                        "# Errors",
                        "* `BadOrigin` - If the caller is neither the subnet owner nor the root account.",
                        "* `SubnetDoesNotExist` - If the specified subnet does not exist.",
                        "",
                        "# Weight",
                        "Weight is handled by the `#[pallet::weight]` attribute."
                      ]
                    },
                    {
                      "name": "sudo_set_evm_chain_id",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": [
                        "Sets the EVM ChainID.",
                        "",
                        "# Arguments",
                        "* `origin` - The origin of the call, which must be the subnet owner or the root account.",
                        "* `chainId` - The u64 chain ID",
                        "",
                        "# Errors",
                        "* `BadOrigin` - If the caller is neither the subnet owner nor the root account.",
                        "",
                        "# Weight",
                        "Weight is handled by the `#[pallet::weight]` attribute."
                      ]
                    },
                    {
                      "name": "schedule_grandpa_change",
                      "fields": [
                        {
                          "name": "next_authorities",
                          "type": 32,
                          "typeName": "AuthorityList",
                          "docs": []
                        },
                        {
                          "name": "in_blocks",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        },
                        {
                          "name": "forced",
                          "type": 116,
                          "typeName": "Option<BlockNumberFor<T>>",
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": [
                        "A public interface for `pallet_grandpa::Pallet::schedule_grandpa_change`.",
                        "",
                        "Schedule a change in the authorities.",
                        "",
                        "The change will be applied at the end of execution of the block `in_blocks` after the",
                        "current block. This value may be 0, in which case the change is applied at the end of",
                        "the current block.",
                        "",
                        "If the `forced` parameter is defined, this indicates that the current set has been",
                        "synchronously determined to be offline and that after `in_blocks` the given change",
                        "should be applied. The given block number indicates the median last finalized block",
                        "number and it should be used as the canon block when starting the new grandpa voter.",
                        "",
                        "No change should be signaled while any change is pending. Returns an error if a change",
                        "is already pending."
                      ]
                    },
                    {
                      "name": "sudo_set_toggle_transfer",
                      "fields": [
                        {
                          "name": "netuid",
                          "type": 39,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "toggle",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": [
                        "Enables or disables Liquid Alpha for a given subnet.",
                        "",
                        "# Parameters",
                        "- `origin`: The origin of the call, which must be the root account or subnet owner.",
                        "- `netuid`: The unique identifier for the subnet.",
                        "- `enabled`: A boolean flag to enable or disable Liquid Alpha.",
                        "",
                        "# Weight",
                        "This function has a fixed weight of 0 and is classified as an operational transaction that does not incur any fees."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchable functions allows users to interact with the pallet and invoke state changes."
              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "pallet_safe_mode",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enter",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Enter safe-mode permissionlessly for [`Config::EnterDuration`] blocks.",
                        "",
                        "Reserves [`Config::EnterDepositAmount`] from the caller's account.",
                        "Emits an [`Event::Entered`] event on success.",
                        "Errors with [`Error::Entered`] if the safe-mode is already entered.",
                        "Errors with [`Error::NotConfigured`] if the deposit amount is `None`."
                      ]
                    },
                    {
                      "name": "force_enter",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Enter safe-mode by force for a per-origin configured number of blocks.",
                        "",
                        "Emits an [`Event::Entered`] event on success.",
                        "Errors with [`Error::Entered`] if the safe-mode is already entered.",
                        "",
                        "Can only be called by the [`Config::ForceEnterOrigin`] origin."
                      ]
                    },
                    {
                      "name": "extend",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Extend the safe-mode permissionlessly for [`Config::ExtendDuration`] blocks.",
                        "",
                        "This accumulates on top of the current remaining duration.",
                        "Reserves [`Config::ExtendDepositAmount`] from the caller's account.",
                        "Emits an [`Event::Extended`] event on success.",
                        "Errors with [`Error::Exited`] if the safe-mode is entered.",
                        "Errors with [`Error::NotConfigured`] if the deposit amount is `None`.",
                        "",
                        "This may be called by any signed origin with [`Config::ExtendDepositAmount`] free",
                        "currency to reserve. This call can be disabled for all origins by configuring",
                        "[`Config::ExtendDepositAmount`] to `None`."
                      ]
                    },
                    {
                      "name": "force_extend",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Extend the safe-mode by force for a per-origin configured number of blocks.",
                        "",
                        "Emits an [`Event::Extended`] event on success.",
                        "Errors with [`Error::Exited`] if the safe-mode is inactive.",
                        "",
                        "Can only be called by the [`Config::ForceExtendOrigin`] origin."
                      ]
                    },
                    {
                      "name": "force_exit",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Exit safe-mode by force.",
                        "",
                        "Emits an [`Event::Exited`] with [`ExitReason::Force`] event on success.",
                        "Errors with [`Error::Exited`] if the safe-mode is inactive.",
                        "",
                        "Note: `safe-mode` will be automatically deactivated by [`Pallet::on_initialize`] hook",
                        "after the block height is greater than the [`EnteredUntil`] storage item.",
                        "Emits an [`Event::Exited`] with [`ExitReason::Timeout`] event when deactivated in the",
                        "hook."
                      ]
                    },
                    {
                      "name": "force_slash_deposit",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Slash a deposit for an account that entered or extended safe-mode at a given",
                        "historical block.",
                        "",
                        "This can only be called while safe-mode is entered.",
                        "",
                        "Emits a [`Event::DepositSlashed`] event on success.",
                        "Errors with [`Error::Entered`] if safe-mode is entered.",
                        "",
                        "Can only be called by the [`Config::ForceDepositOrigin`] origin."
                      ]
                    },
                    {
                      "name": "release_deposit",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Permissionlessly release a deposit for an account that entered safe-mode at a",
                        "given historical block.",
                        "",
                        "The call can be completely disabled by setting [`Config::ReleaseDelay`] to `None`.",
                        "This cannot be called while safe-mode is entered and not until",
                        "[`Config::ReleaseDelay`] blocks have passed since safe-mode was entered.",
                        "",
                        "Emits a [`Event::DepositReleased`] event on success.",
                        "Errors with [`Error::Entered`] if the safe-mode is entered.",
                        "Errors with [`Error::CannotReleaseYet`] if [`Config::ReleaseDelay`] block have not",
                        "passed since safe-mode was entered. Errors with [`Error::NoDeposit`] if the payee has no",
                        "reserved currency at the block specified."
                      ]
                    },
                    {
                      "name": "force_release_deposit",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Force to release a deposit for an account that entered safe-mode at a given",
                        "historical block.",
                        "",
                        "This can be called while safe-mode is still entered.",
                        "",
                        "Emits a [`Event::DepositReleased`] event on success.",
                        "Errors with [`Error::Entered`] if safe-mode is entered.",
                        "Errors with [`Error::NoDeposit`] if the payee has no reserved currency at the",
                        "specified block.",
                        "",
                        "Can only be called by the [`Config::ForceDepositOrigin`] origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 358,
                          "typeName": "Transaction",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transact an Ethereum transaction."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 359,
                          "typeName": "LegacyTransaction",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 363,
                          "typeName": "EIP2930Transaction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 366,
                          "typeName": "EIP1559Transaction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 360,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 14,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 361,
                      "typeName": "TransactionSignature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Create",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 362,
                      "typeName": "TransactionRecoveryId",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_price",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 360,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 14,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": 364,
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 9,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 364,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 365
                }
              },
              "docs": []
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 67,
                      "typeName": "Address",
                      "docs": []
                    },
                    {
                      "name": "storage_keys",
                      "type": 45,
                      "typeName": "Vec<H256>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "action",
                      "type": 360,
                      "typeName": "TransactionAction",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "type": 14,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "type": 364,
                      "typeName": "AccessList",
                      "docs": []
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 9,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "r",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "s",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "address",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw balance from EVM into currency/balances pallet."
                      ]
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 369,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 369,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 67,
                          "typeName": "H160",
                          "docs": []
                        },
                        {
                          "name": "init",
                          "type": 14,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "salt",
                          "type": 13,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 6,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "nonce",
                          "type": 368,
                          "typeName": "Option<U256>",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 369,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    },
                    {
                      "name": "set_whitelist",
                      "fields": [
                        {
                          "name": "new",
                          "type": 371,
                          "typeName": "Vec<H160>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "disable_whitelist",
                      "fields": [
                        {
                          "name": "disabled",
                          "type": 9,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 80
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 80,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 369,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 370
                }
              },
              "docs": []
            }
          },
          {
            "id": 370,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  67,
                  45
                ]
              },
              "docs": []
            }
          },
          {
            "id": 371,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 67
                }
              },
              "docs": []
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 80,
                          "typeName": "U256",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 82,
                          "typeName": "Permill",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_drand",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "write_pulse",
                      "fields": [
                        {
                          "name": "pulses_payload",
                          "type": 374,
                          "typeName": "PulsesPayload<T::Public, BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 380,
                          "typeName": "Option<T::Signature>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Verify and write a pulse from the beacon into the runtime"
                      ]
                    },
                    {
                      "name": "set_beacon_config",
                      "fields": [
                        {
                          "name": "config_payload",
                          "type": 382,
                          "typeName": "BeaconConfigurationPayload<T::Public, BlockNumberFor<T>>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 380,
                          "typeName": "Option<T::Signature>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "allows the root user to set the beacon configuration",
                        "generally this would be called from an offchain worker context.",
                        "there is no verification of configurations, so be careful with this.",
                        "",
                        "* `origin`: the root user",
                        "* `config`: the beacon configuration"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_drand",
                "types",
                "PulsesPayload"
              ],
              "params": [
                {
                  "name": "Public",
                  "type": 375
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "pulses",
                      "type": 376,
                      "typeName": "Vec<Pulse>",
                      "docs": []
                    },
                    {
                      "name": "public",
                      "type": 375,
                      "typeName": "Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "ed25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "sr25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": "ecdsa::Public",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 376,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 377
                }
              },
              "docs": []
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_drand",
                "types",
                "Pulse"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 6,
                      "typeName": "RoundNumber",
                      "docs": []
                    },
                    {
                      "name": "randomness",
                      "type": 378,
                      "typeName": "BoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 379,
                      "typeName": "BoundedVec<u8, ConstU32<144>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 381
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 381,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 290,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_drand",
                "types",
                "BeaconConfigurationPayload"
              ],
              "params": [
                {
                  "name": "Public",
                  "type": 375
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "config",
                      "type": 383,
                      "typeName": "BeaconConfiguration",
                      "docs": []
                    },
                    {
                      "name": "public",
                      "type": 375,
                      "typeName": "Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_drand",
                "types",
                "BeaconConfiguration"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "public_key",
                      "type": 384,
                      "typeName": "OpaquePublicKey",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "genesis_time",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "type": 378,
                      "typeName": "BoundedHash",
                      "docs": []
                    },
                    {
                      "name": "group_hash",
                      "type": 378,
                      "typeName": "BoundedHash",
                      "docs": []
                    },
                    {
                      "name": "scheme_id",
                      "type": 378,
                      "typeName": "BoundedHash",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "type": 385,
                      "typeName": "Metadata",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "pallet_drand",
                "types",
                "Metadata"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "beacon_id",
                      "type": 378,
                      "typeName": "BoundedHash",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 187
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 187,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_subtensor",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SubNetworkDoesNotExist",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The subnet does not exist."
                      ]
                    },
                    {
                      "name": "RootNetworkDoesNotExist",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The root network does not exist."
                      ]
                    },
                    {
                      "name": "InvalidIpType",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The user is trying to serve an axon which is not of type 4 (IPv4) or 6 (IPv6)."
                      ]
                    },
                    {
                      "name": "InvalidIpAddress",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "An invalid IP address is passed to the serve function."
                      ]
                    },
                    {
                      "name": "InvalidPort",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "An invalid port is passed to the serve function."
                      ]
                    },
                    {
                      "name": "HotKeyNotRegisteredInSubNet",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The hotkey is not registered in subnet"
                      ]
                    },
                    {
                      "name": "HotKeyAccountNotExists",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The hotkey does not exists"
                      ]
                    },
                    {
                      "name": "HotKeyNotRegisteredInNetwork",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The hotkey is not registered in any subnet."
                      ]
                    },
                    {
                      "name": "NonAssociatedColdKey",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Request to stake, unstake or subscribe is made by a coldkey that is not associated with",
                        "the hotkey account."
                      ]
                    },
                    {
                      "name": "NotEnoughStake",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "DEPRECATED: Stake amount to withdraw is zero.",
                        "The caller does not have enought stake to perform this action."
                      ]
                    },
                    {
                      "name": "NotEnoughStakeToWithdraw",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The caller is requesting removing more stake than there exists in the staking account.",
                        "See: \"[remove_stake()]\"."
                      ]
                    },
                    {
                      "name": "NotEnoughStakeToSetWeights",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The caller is requesting to set weights but the caller has less than minimum stake",
                        "required to set weights (less than WeightsMinStake)."
                      ]
                    },
                    {
                      "name": "NotEnoughStakeToSetChildkeys",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The parent hotkey doesn't have enough own stake to set childkeys."
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToStake",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The caller is requesting adding more stake than there exists in the coldkey account.",
                        "See: \"[add_stake()]\""
                      ]
                    },
                    {
                      "name": "BalanceWithdrawalError",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The caller is trying to add stake, but for some reason the requested amount could not be",
                        "withdrawn from the coldkey account."
                      ]
                    },
                    {
                      "name": "ZeroBalanceAfterWithdrawn",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Unsuccessfully withdraw, balance could be zero (can not make account exist) after",
                        "withdrawal."
                      ]
                    },
                    {
                      "name": "NeuronNoValidatorPermit",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The caller is attempting to set non-self weights without being a permitted validator."
                      ]
                    },
                    {
                      "name": "WeightVecNotEqualSize",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The caller is attempting to set the weight keys and values but these vectors have",
                        "different size."
                      ]
                    },
                    {
                      "name": "DuplicateUids",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The caller is attempting to set weights with duplicate UIDs in the weight matrix."
                      ]
                    },
                    {
                      "name": "UidVecContainInvalidOne",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The caller is attempting to set weight to at least one UID that does not exist in the",
                        "metagraph."
                      ]
                    },
                    {
                      "name": "WeightVecLengthIsLow",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "The dispatch is attempting to set weights on chain with fewer elements than are allowed."
                      ]
                    },
                    {
                      "name": "TooManyRegistrationsThisBlock",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "Number of registrations in this block exceeds the allowed number (i.e., exceeds the",
                        "subnet hyperparameter \"max_regs_per_block\")."
                      ]
                    },
                    {
                      "name": "HotKeyAlreadyRegisteredInSubNet",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The caller is requesting registering a neuron which already exists in the active set."
                      ]
                    },
                    {
                      "name": "NewHotKeyIsSameWithOld",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The new hotkey is the same as old one"
                      ]
                    },
                    {
                      "name": "InvalidWorkBlock",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "The supplied PoW hash block is in the future or negative."
                      ]
                    },
                    {
                      "name": "InvalidDifficulty",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "The supplied PoW hash block does not meet the network difficulty."
                      ]
                    },
                    {
                      "name": "InvalidSeal",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "The supplied PoW hash seal does not match the supplied work."
                      ]
                    },
                    {
                      "name": "MaxWeightExceeded",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "The dispatch is attempting to set weights on chain with weight value exceeding the",
                        "MaxWeightLimit (max_weight_limit subnet hyperparameter)."
                      ]
                    },
                    {
                      "name": "HotKeyAlreadyDelegate",
                      "fields": [],
                      "index": 28,
                      "docs": [
                        "The hotkey is attempting to become a delegate when the hotkey is already a delegate."
                      ]
                    },
                    {
                      "name": "SettingWeightsTooFast",
                      "fields": [],
                      "index": 29,
                      "docs": [
                        "A transactor exceeded the rate limit for setting weights."
                      ]
                    },
                    {
                      "name": "IncorrectWeightVersionKey",
                      "fields": [],
                      "index": 30,
                      "docs": [
                        "A validator is attempting to set weights from a validator with incorrect weight version."
                      ]
                    },
                    {
                      "name": "ServingRateLimitExceeded",
                      "fields": [],
                      "index": 31,
                      "docs": [
                        "An axon or prometheus serving exceeded the rate limit for a registered neuron."
                      ]
                    },
                    {
                      "name": "UidsLengthExceedUidsInSubNet",
                      "fields": [],
                      "index": 32,
                      "docs": [
                        "The caller is attempting to set weights with more UIDs than allowed."
                      ]
                    },
                    {
                      "name": "NetworkTxRateLimitExceeded",
                      "fields": [],
                      "index": 33,
                      "docs": [
                        "A transactor exceeded the rate limit for add network transaction."
                      ]
                    },
                    {
                      "name": "DelegateTxRateLimitExceeded",
                      "fields": [],
                      "index": 34,
                      "docs": [
                        "A transactor exceeded the rate limit for delegate transaction."
                      ]
                    },
                    {
                      "name": "HotKeySetTxRateLimitExceeded",
                      "fields": [],
                      "index": 35,
                      "docs": [
                        "A transactor exceeded the rate limit for setting or swapping hotkey."
                      ]
                    },
                    {
                      "name": "StakingRateLimitExceeded",
                      "fields": [],
                      "index": 36,
                      "docs": [
                        "A transactor exceeded the rate limit for staking."
                      ]
                    },
                    {
                      "name": "SubNetRegistrationDisabled",
                      "fields": [],
                      "index": 37,
                      "docs": [
                        "Registration is disabled."
                      ]
                    },
                    {
                      "name": "TooManyRegistrationsThisInterval",
                      "fields": [],
                      "index": 38,
                      "docs": [
                        "The number of registration attempts exceeded the allowed number in the interval."
                      ]
                    },
                    {
                      "name": "TransactorAccountShouldBeHotKey",
                      "fields": [],
                      "index": 39,
                      "docs": [
                        "The hotkey is required to be the origin."
                      ]
                    },
                    {
                      "name": "NotSenateMember",
                      "fields": [],
                      "index": 40,
                      "docs": [
                        "A hotkey is attempting to do something only senate members can do."
                      ]
                    },
                    {
                      "name": "FaucetDisabled",
                      "fields": [],
                      "index": 41,
                      "docs": [
                        "Faucet is disabled."
                      ]
                    },
                    {
                      "name": "NotSubnetOwner",
                      "fields": [],
                      "index": 42,
                      "docs": [
                        "Not a subnet owner."
                      ]
                    },
                    {
                      "name": "RegistrationNotPermittedOnRootSubnet",
                      "fields": [],
                      "index": 43,
                      "docs": [
                        "Operation is not permitted on the root subnet."
                      ]
                    },
                    {
                      "name": "StakeTooLowForRoot",
                      "fields": [],
                      "index": 44,
                      "docs": [
                        "A hotkey with too little stake is attempting to join the root subnet."
                      ]
                    },
                    {
                      "name": "AllNetworksInImmunity",
                      "fields": [],
                      "index": 45,
                      "docs": [
                        "All subnets are in the immunity period."
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToPaySwapHotKey",
                      "fields": [],
                      "index": 46,
                      "docs": [
                        "Not enough balance to pay swapping hotkey."
                      ]
                    },
                    {
                      "name": "NotRootSubnet",
                      "fields": [],
                      "index": 47,
                      "docs": [
                        "Netuid does not match for setting root network weights."
                      ]
                    },
                    {
                      "name": "CanNotSetRootNetworkWeights",
                      "fields": [],
                      "index": 48,
                      "docs": [
                        "Can not set weights for the root network."
                      ]
                    },
                    {
                      "name": "NoNeuronIdAvailable",
                      "fields": [],
                      "index": 49,
                      "docs": [
                        "No neuron ID is available."
                      ]
                    },
                    {
                      "name": "DelegateTakeTooLow",
                      "fields": [],
                      "index": 50,
                      "docs": [
                        "Delegate take is too low."
                      ]
                    },
                    {
                      "name": "DelegateTakeTooHigh",
                      "fields": [],
                      "index": 51,
                      "docs": [
                        "Delegate take is too high."
                      ]
                    },
                    {
                      "name": "NoWeightsCommitFound",
                      "fields": [],
                      "index": 52,
                      "docs": [
                        "No commit found for the provided hotkey+netuid combination when attempting to reveal the",
                        "weights."
                      ]
                    },
                    {
                      "name": "InvalidRevealCommitHashNotMatch",
                      "fields": [],
                      "index": 53,
                      "docs": [
                        "Committed hash does not equal the hashed reveal data."
                      ]
                    },
                    {
                      "name": "CommitRevealEnabled",
                      "fields": [],
                      "index": 54,
                      "docs": [
                        "Attempting to call set_weights when commit/reveal is enabled"
                      ]
                    },
                    {
                      "name": "CommitRevealDisabled",
                      "fields": [],
                      "index": 55,
                      "docs": [
                        "Attemtping to commit/reveal weights when disabled."
                      ]
                    },
                    {
                      "name": "CouldNotJoinSenate",
                      "fields": [],
                      "index": 56,
                      "docs": [
                        "Not able to join the senate."
                      ]
                    },
                    {
                      "name": "LiquidAlphaDisabled",
                      "fields": [],
                      "index": 57,
                      "docs": [
                        "Attempting to set alpha high/low while disabled"
                      ]
                    },
                    {
                      "name": "AlphaHighTooLow",
                      "fields": [],
                      "index": 58,
                      "docs": [
                        "Alpha high is too low: alpha_high > 0.8"
                      ]
                    },
                    {
                      "name": "AlphaLowOutOfRange",
                      "fields": [],
                      "index": 59,
                      "docs": [
                        "Alpha low is out of range: alpha_low > 0 && alpha_low < 0.8"
                      ]
                    },
                    {
                      "name": "ColdKeyAlreadyAssociated",
                      "fields": [],
                      "index": 60,
                      "docs": [
                        "The coldkey has already been swapped"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToPaySwapColdKey",
                      "fields": [],
                      "index": 61,
                      "docs": [
                        "The coldkey balance is not enough to pay for the swap"
                      ]
                    },
                    {
                      "name": "ColdkeyIsInArbitration",
                      "fields": [],
                      "index": 62,
                      "docs": [
                        "The coldkey is in arbitration"
                      ]
                    },
                    {
                      "name": "InvalidChild",
                      "fields": [],
                      "index": 63,
                      "docs": [
                        "Attempting to set an invalid child for a hotkey on a network."
                      ]
                    },
                    {
                      "name": "DuplicateChild",
                      "fields": [],
                      "index": 64,
                      "docs": [
                        "Duplicate child when setting children."
                      ]
                    },
                    {
                      "name": "ProportionOverflow",
                      "fields": [],
                      "index": 65,
                      "docs": [
                        "Proportion overflow when setting children."
                      ]
                    },
                    {
                      "name": "TooManyChildren",
                      "fields": [],
                      "index": 66,
                      "docs": [
                        "Too many children MAX 5."
                      ]
                    },
                    {
                      "name": "TxRateLimitExceeded",
                      "fields": [],
                      "index": 67,
                      "docs": [
                        "Default transaction rate limit exceeded."
                      ]
                    },
                    {
                      "name": "SwapAlreadyScheduled",
                      "fields": [],
                      "index": 68,
                      "docs": [
                        "Swap already scheduled."
                      ]
                    },
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 69,
                      "docs": [
                        "failed to swap coldkey"
                      ]
                    },
                    {
                      "name": "NewColdKeyIsHotkey",
                      "fields": [],
                      "index": 70,
                      "docs": [
                        "New coldkey is hotkey"
                      ]
                    },
                    {
                      "name": "InvalidChildkeyTake",
                      "fields": [],
                      "index": 71,
                      "docs": [
                        "Childkey take is invalid."
                      ]
                    },
                    {
                      "name": "TxChildkeyTakeRateLimitExceeded",
                      "fields": [],
                      "index": 72,
                      "docs": [
                        "Childkey take rate limit exceeded."
                      ]
                    },
                    {
                      "name": "InvalidIdentity",
                      "fields": [],
                      "index": 73,
                      "docs": [
                        "Invalid identity."
                      ]
                    },
                    {
                      "name": "MechanismDoesNotExist",
                      "fields": [],
                      "index": 74,
                      "docs": [
                        "Trying to register a subnet into a mechanism that does not exist."
                      ]
                    },
                    {
                      "name": "CannotUnstakeLock",
                      "fields": [],
                      "index": 75,
                      "docs": [
                        "Trying to unstake your lock amount."
                      ]
                    },
                    {
                      "name": "SubnetNotExists",
                      "fields": [],
                      "index": 76,
                      "docs": [
                        "Trying to perform action on non-existent subnet."
                      ]
                    },
                    {
                      "name": "TooManyUnrevealedCommits",
                      "fields": [],
                      "index": 77,
                      "docs": [
                        "Maximum commit limit reached"
                      ]
                    },
                    {
                      "name": "ExpiredWeightCommit",
                      "fields": [],
                      "index": 78,
                      "docs": [
                        "Attempted to reveal weights that are expired."
                      ]
                    },
                    {
                      "name": "RevealTooEarly",
                      "fields": [],
                      "index": 79,
                      "docs": [
                        "Attempted to reveal weights too early."
                      ]
                    },
                    {
                      "name": "InputLengthsUnequal",
                      "fields": [],
                      "index": 80,
                      "docs": [
                        "Attempted to batch reveal weights with mismatched vector input lenghts."
                      ]
                    },
                    {
                      "name": "CommittingWeightsTooFast",
                      "fields": [],
                      "index": 81,
                      "docs": [
                        "A transactor exceeded the rate limit for setting weights."
                      ]
                    },
                    {
                      "name": "AmountTooLow",
                      "fields": [],
                      "index": 82,
                      "docs": [
                        "Stake amount is too low."
                      ]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "fields": [],
                      "index": 83,
                      "docs": [
                        "Not enough liquidity."
                      ]
                    },
                    {
                      "name": "SlippageTooHigh",
                      "fields": [],
                      "index": 84,
                      "docs": [
                        "Slippage is too high for the transaction."
                      ]
                    },
                    {
                      "name": "TransferDisallowed",
                      "fields": [],
                      "index": 85,
                      "docs": [
                        "Subnet disallows transfer."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 45,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "ayes",
                      "type": 151,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 151,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member of collective"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalNotExists",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "IndexMismatchProposalHash",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Index mismatched the proposal hash"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "TooEarlyToCloseProposal",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The call to close the proposal was made too early, before the end of the voting"
                      ]
                    },
                    {
                      "name": "TooManyActiveProposals",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "ProposalWeightLessThanDispatchCallWeight",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The given weight-bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "ProposalLengthBoundLessThanProposalLength",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given length-bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "DurationLowerThanConfiguredMotionDuration",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given motion duration for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 151,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 151,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet."
              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  1
                ]
              },
              "docs": []
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "MaxApprovals",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 54,
                      "typeName": "Timepoint<BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 399,
                      "typeName": "BoundedVec<AccountId, MaxApprovals>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 151,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "pallet_preimage",
                "OldRequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 402,
                          "typeName": "(AccountId, Balance)",
                          "docs": []
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 403,
                          "typeName": "Option<(AccountId, Balance)>",
                          "docs": []
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "len",
                          "type": 116,
                          "typeName": "Option<u32>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 402,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 402
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 402,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Ticket",
                  "type": 405
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "ticket",
                          "type": 406,
                          "typeName": "(AccountId, Ticket)",
                          "docs": []
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "maybe_ticket",
                          "type": 407,
                          "typeName": "Option<(AccountId, Ticket)>",
                          "docs": []
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "maybe_len",
                          "type": 116,
                          "typeName": "Option<u32>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "fungible",
                "HoldConsideration"
              ],
              "params": [
                {
                  "name": "A",
                  "type": null
                },
                {
                  "name": "F",
                  "type": null
                },
                {
                  "name": "R",
                  "type": null
                },
                {
                  "name": "D",
                  "type": null
                },
                {
                  "name": "Fp",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "F::Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 406,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  405
                ]
              },
              "docs": []
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 406
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 406,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 408,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  13,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooBig",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    },
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                      ]
                    },
                    {
                      "name": "TooFew",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Too few hashes were requested to be upgraded (i.e. zero)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 412
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 417,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 413
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 413,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "pallet_scheduler",
                "Scheduled"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 1
                },
                {
                  "name": "Call",
                  "type": 414
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 207
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 58,
                      "typeName": "Option<Name>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 414,
                      "typeName": "Call",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 216,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 207,
                      "typeName": "PalletsOrigin",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "preimages",
                "Bounded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 201
                },
                {
                  "name": "H",
                  "type": 415
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H::Output",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Inline",
                      "fields": [
                        {
                          "name": null,
                          "type": 416,
                          "typeName": "BoundedInline",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Lookup",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H::Output",
                          "docs": []
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 417,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 412
                }
              },
              "docs": []
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_scheduler",
                "RetryConfig"
              ],
              "params": [
                {
                  "name": "Period",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_retries",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "remaining",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "Period",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    },
                    {
                      "name": "Named",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Attempt to use a non-named function on a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 420,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  421,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 422
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 423,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 60
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 60,
                      "typeName": "ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 423,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 422
                }
              },
              "docs": []
            }
          },
          {
            "id": 424,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  425,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 426
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 427,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 13
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 13,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 427,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 426
                }
              },
              "docs": []
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "pallet_registry",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "info",
                      "type": 220,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "pallet_registry",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotRegister",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account attempted to register an identity but does not meet the requirements."
                      ]
                    },
                    {
                      "name": "TooManyFieldsInIdentityInfo",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account passed too many additional fields to their identity"
                      ]
                    },
                    {
                      "name": "NotRegistered",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Account doesn't have a registered identity"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "pallet_commitments",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxFields",
                  "type": null
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "info",
                      "type": 287,
                      "typeName": "CommitmentInfo<MaxFields>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "pallet_commitments",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyFieldsInCommitmentInfo",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account passed too many additional fields to their commitment"
                      ]
                    },
                    {
                      "name": "AccountNotAllowedCommit",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account is not allow to make commitments to the chain"
                      ]
                    },
                    {
                      "name": "CommitmentSetRateLimitExceeded",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Account is trying to commit data too fast, rate limit exceeded"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "pallet_admin_utils",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SubnetDoesNotExist",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The subnet does not exist, check the netuid parameter"
                      ]
                    },
                    {
                      "name": "MaxValidatorsLargerThanMaxUIds",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The maximum number of subnet validators must be less than the maximum number of allowed UIDs in the subnet."
                      ]
                    },
                    {
                      "name": "MaxAllowedUIdsLessThanCurrentUIds",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The maximum number of subnet validators must be more than the current number of UIDs already in the subnet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "pallet_safe_mode",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Entered",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The safe-mode is (already or still) entered."
                      ]
                    },
                    {
                      "name": "Exited",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The safe-mode is (already or still) exited."
                      ]
                    },
                    {
                      "name": "NotConfigured",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "This functionality of the pallet is disabled by the configuration."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "There is no balance reserved."
                      ]
                    },
                    {
                      "name": "AlreadyDeposited",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The account already has a deposit reserved and can therefore not enter or extend again."
                      ]
                    },
                    {
                      "name": "CannotReleaseYet",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "This deposit cannot be released yet."
                      ]
                    },
                    {
                      "name": "CurrencyError",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "An error from the underlying `Currency`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 438
                }
              },
              "docs": []
            }
          },
          {
            "id": 438,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  358,
                  439,
                  444
                ]
              },
              "docs": []
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": 67,
                      "typeName": "Address",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 440,
                      "typeName": "Option<Address>",
                      "docs": []
                    },
                    {
                      "name": "contract_address",
                      "type": 440,
                      "typeName": "Option<Address>",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": 441,
                      "typeName": "Vec<Log>",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 442,
                      "typeName": "Bloom",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 67
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 441,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 78
                }
              },
              "docs": []
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 443,
                      "typeName": "[u8; BLOOM_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 443,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 445,
                          "typeName": "EIP658ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 445,
                          "typeName": "EIP2930ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 445,
                          "typeName": "EIP1559ReceiptData",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "used_gas",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 442,
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "logs",
                      "type": 441,
                      "typeName": "Vec<Log>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 358
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 447,
                      "typeName": "Header",
                      "docs": []
                    },
                    {
                      "name": "transactions",
                      "type": 449,
                      "typeName": "Vec<T>",
                      "docs": []
                    },
                    {
                      "name": "ommers",
                      "type": 450,
                      "typeName": "Vec<Header>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "ommers_hash",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 67,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "transactions_root",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "receipts_root",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "logs_bloom",
                      "type": 442,
                      "typeName": "Bloom",
                      "docs": []
                    },
                    {
                      "name": "difficulty",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_used",
                      "type": 80,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "extra_data",
                      "type": 14,
                      "typeName": "Bytes",
                      "docs": []
                    },
                    {
                      "name": "mix_hash",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "type": 448,
                      "typeName": "H64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 105,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 449,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 358
                }
              },
              "docs": []
            }
          },
          {
            "id": 450,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 447
                }
              },
              "docs": []
            }
          },
          {
            "id": 451,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 444
                }
              },
              "docs": []
            }
          },
          {
            "id": 452,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 439
                }
              },
              "docs": []
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "pallet_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "pallet_evm",
                "CodeMetadata"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "size",
                      "type": 6,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "type": 13,
                      "typeName": "H256",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 455,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  67,
                  13
                ]
              },
              "docs": []
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "pallet_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    },
                    {
                      "name": "GasLimitTooLow",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Gas limit is too low."
                      ]
                    },
                    {
                      "name": "GasLimitTooHigh",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Gas limit is too high."
                      ]
                    },
                    {
                      "name": "InvalidChainId",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The chain id is invalid."
                      ]
                    },
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "the signature is invalid."
                      ]
                    },
                    {
                      "name": "Reentrancy",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "EVM reentrancy"
                      ]
                    },
                    {
                      "name": "TransactionMustComeFromEOA",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "EIP-3607,"
                      ]
                    },
                    {
                      "name": "Undefined",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Undefined error."
                      ]
                    },
                    {
                      "name": "NotAllowed",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Origin is not allowed to perform the operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_drand",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoneValue",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The value retrieved was `None` as no value was previously set."
                      ]
                    },
                    {
                      "name": "StorageOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "There was an attempt to increment the value in storage over `u32::MAX`."
                      ]
                    },
                    {
                      "name": "DrandConnectionFailure",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "failed to connect to the"
                      ]
                    },
                    {
                      "name": "UnverifiedPulse",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "the pulse is invalid"
                      ]
                    },
                    {
                      "name": "InvalidRoundNumber",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "the round number did not increment"
                      ]
                    },
                    {
                      "name": "PulseVerificationError",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "the pulse could not be verified"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 149
                },
                {
                  "name": "Call",
                  "type": 201
                },
                {
                  "name": "Signature",
                  "type": 381
                },
                {
                  "name": "Extra",
                  "type": 459
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 474,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 459,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  460,
                  461,
                  462,
                  463,
                  464,
                  466,
                  467,
                  468,
                  469,
                  471,
                  472
                ]
              },
              "docs": []
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 465,
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 134,
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 135,
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 138,
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 139,
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 143,
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 144,
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 145,
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 146,
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 147,
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 148,
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 149,
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 153,
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 154,
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 155,
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 156,
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 157,
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 158,
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 159,
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 161,
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 162,
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 163,
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 164,
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 165,
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 166,
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 167,
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 177,
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 178,
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 179,
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 181,
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 183,
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 184,
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 185,
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 186,
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 187,
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 188,
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 189,
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 193,
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 194,
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 196,
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 197,
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 198,
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 199,
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 202,
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 203,
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 204,
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 205,
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 206,
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 207,
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 208,
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 209,
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 211,
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 212,
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 213,
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 214,
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 215,
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 216,
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 217,
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 218,
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 219,
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 220,
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 221,
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 222,
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 223,
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 224,
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 225,
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 226,
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 227,
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 228,
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 229,
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 230,
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 231,
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 232,
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 233,
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 234,
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 235,
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 236,
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 237,
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 238,
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 239,
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 240,
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 241,
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 242,
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 243,
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 244,
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 245,
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 246,
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 247,
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 248,
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 249,
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 250,
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 251,
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 252,
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 253,
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 254,
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 88,
                      "typeName": "T::Nonce",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 12,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "pallet_subtensor",
                "SubtensorSignedExtension"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 470
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "node_subtensor_runtime",
                "Runtime"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "pallet_commitments",
                "CommitmentsSignedExtension"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 470
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "CheckMetadataHash"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mode",
                      "type": 473,
                      "typeName": "Mode",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "Mode"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Disabled",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Enabled",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 149
                },
                {
                  "name": "Call",
                  "type": 201
                },
                {
                  "name": "Signature",
                  "type": 381
                },
                {
                  "name": "Extra",
                  "type": 459
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "InherentsApplied",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " Whether all inherents have been applied."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 14
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 13
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 19
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 86
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 87
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 85
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 89
                },
                "fallback": "0x00",
                "docs": [
                  " `Some` if a code upgrade has been authorized."
                ]
              }
            ]
          },
          "calls": {
            "type": 90
          },
          "events": {
            "type": 22
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 94,
              "value": "0x624d186c000b00409452a30313ffffffffffffffff4247871900010b30beb1555d021366666666666666a6010b0030ef7dba0213ffffffffffffffbf0100004247871900010b30ce562a46031366666666666666e6010b00409452a30313ffffffffffffffff01070010a5d4e81300000000000000404247871900000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 98,
              "value": "0x000078000000a0000000a000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 100,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 101,
              "value": "0x386e6f64652d73756274656e736f72386e6f64652d73756274656e736f7201000000e9000000010000004cdf6acb689907609b0500000037e397fc7c91f5e40200000040fe3ad401f8959a06000000fbc577b9d747efd601000000d2bc9897eed08f1503000000f78b278be53f454c02000000dd718d5cc53262d401000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab52705903000000582211f65bb14b8905000000e65b00e46cedd0aa0200000042e62be4a39e5b6001000000806df4ccaa9ed485010000008375104b299b74c5010000005d1fbfbe852f280701000000c6886e2f8e598b0a010000000100000001",
              "docs": [
                " Get the chain's in-code version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 39,
              "value": "0x2a00",
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 106
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": 107
                },
                "fallback": "0x00",
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " Whether the timestamp has been updated in this block.",
                  "",
                  " This value is updated to `true` upon successful submission of a timestamp by a node.",
                  " It is then checked at the end of each block execution in the `on_finalize` hook."
                ]
              }
            ]
          },
          "calls": {
            "type": 108
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 6,
              "value": "0x7017000000000000",
              "docs": [
                " The minimum period between blocks.",
                "",
                " Be aware that this is different to the *expected* period that the block production",
                " apparatus provides. Your chosen consensus system will generally work with this to",
                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                " period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 2
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 109
                },
                "fallback": "0x00",
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 112
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "SlotDuration",
              "type": 6,
              "value": "0xe02e000000000000",
              "docs": [
                " The slot duration Aura should run with, expressed in milliseconds.",
                " The effective value of this type should not change while the chain is running.",
                "",
                " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
              ]
            }
          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": 113
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": 114
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": 57
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 6,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 115
                },
                "fallback": "0x00",
                "docs": [
                  " The current list of authorities."
                ]
              }
            ]
          },
          "calls": {
            "type": 117
          },
          "events": {
            "type": 31
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " Max Authorities in use"
              ]
            },
            {
              "name": "MaxNominators",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " The maximum number of nominators for each validator."
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "errors": {
            "type": 129
          },
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 130
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                  "",
                  " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 134
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances.",
                  "",
                  " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 137
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 144
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "type": 148
          },
          "events": {
            "type": 35
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0xf401000000000000",
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxFreezes",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "errors": {
            "type": 153
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 154
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 155
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 37
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "SubtensorModule",
          "storage": {
            "prefix": "SubtensorModule",
            "items": [
              {
                "name": "ColdkeySwapScheduleDuration",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0xa08c0000",
                "docs": []
              },
              {
                "name": "DissolveNetworkScheduleDuration",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0xa08c0000",
                "docs": []
              },
              {
                "name": "SenateRequiredStakePercentage",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0100000000000000",
                "docs": []
              },
              {
                "name": "TaoWeight",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xfc62e03efa3c7c0d",
                "docs": [
                  " ============================",
                  " ==== Staking Variables ====",
                  " ============================",
                  " The Subtensor [`TotalIssuance`] represents the total issuance of tokens on the Bittensor network.",
                  "",
                  " It is comprised of three parts:",
                  " - The total amount of issued tokens, tracked in the TotalIssuance of the Balances pallet",
                  " - The total amount of tokens staked in the system, tracked in [`TotalStake`]",
                  " - The total amount of tokens locked up for subnet reg, tracked in [`TotalSubnetLocked`] attained by iterating over subnet lock.",
                  "",
                  " Eventually, Bittensor should migrate to using Holds afterwhich time we will not require this",
                  " separate accounting.",
                  " --- ITEM --> Global weight"
                ]
              },
              {
                "name": "MaxDelegateTake",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x142e",
                "docs": [
                  " --- ITEM ( default_delegate_take )"
                ]
              },
              {
                "name": "MinDelegateTake",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x0000",
                "docs": [
                  " --- ITEM ( min_delegate_take )"
                ]
              },
              {
                "name": "MaxChildkeyTake",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x142e",
                "docs": [
                  " --- ITEM ( default_childkey_take )"
                ]
              },
              {
                "name": "MinChildkeyTake",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x0000",
                "docs": [
                  " --- ITEM ( min_childkey_take )"
                ]
              },
              {
                "name": "Owner",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " MAP ( hot ) --> cold | Returns the controlling coldkey for a hotkey."
                ]
              },
              {
                "name": "Delegates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 39
                  }
                },
                "fallback": "0x142e",
                "docs": [
                  " MAP ( hot ) --> take | Returns the hotkey delegation take. And signals that this key is open for delegation."
                ]
              },
              {
                "name": "ChildkeyTake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " DMAP ( hot, netuid ) --> take | Returns the hotkey childkey take for a specific subnet"
                ]
              },
              {
                "name": "PendingChildKeys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 158
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " DMAP ( netuid, parent ) --> (Vec<(proportion,child)>, cool_down_block)"
                ]
              },
              {
                "name": "ChildKeys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 43
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DMAP ( parent, netuid ) --> Vec<(proportion,child)>"
                ]
              },
              {
                "name": "ParentKeys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 43
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " DMAP ( child, netuid ) --> Vec<(proportion,parent)>"
                ]
              },
              {
                "name": "AlphaDividendsPerSubnet",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "TaoDividendsPerSubnet",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "BlockEmission",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00ca9a3b00000000",
                "docs": [
                  " ==================",
                  " ==== Coinbase ====",
                  " ==================",
                  " --- ITEM ( global_block_emission )"
                ]
              },
              {
                "name": "LastHotkeyEmissionOnNetuid",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- DMap ( hot, netuid ) --> emission | last hotkey emission on network."
                ]
              },
              {
                "name": "LastHotkeyColdkeyEmissionOnNetuid",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 159,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- NMAP ( hot, cold, netuid ) --> last_emission_on_hot_cold_net | Returns the last_emission_update_on_hot_cold_net"
                ]
              },
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " ==========================",
                  " ==== Staking Counters ====",
                  " ==========================",
                  " The Subtensor [`TotalIssuance`] represents the total issuance of tokens on the Bittensor network.",
                  "",
                  " It is comprised of three parts:",
                  " - The total amount of issued tokens, tracked in the TotalIssuance of the Balances pallet",
                  " - The total amount of tokens staked in the system, tracked in [`TotalStake`]",
                  " - The total amount of tokens locked up for subnet reg, tracked in [`TotalSubnetLocked`] attained by iterating over subnet lock.",
                  "",
                  " Eventually, Bittensor should migrate to using Holds afterwhich time we will not require this",
                  " separate accounting."
                ]
              },
              {
                "name": "TotalStake",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "DynamicBlock",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetMovingAlpha",
                "modifier": "Default",
                "type": {
                  "plain": 160
                },
                "fallback": "0x55320000000000000000000000000000",
                "docs": []
              },
              {
                "name": "SubnetMovingPrice",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 160
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "SubnetVolume",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 8
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "SubnetTAO",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetAlphaInEmission",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetAlphaOutEmission",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetTaoInEmission",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetAlphaEmissionSell",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "TotalStakeAtDynamic",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetAlphaIn",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SubnetAlphaOut",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "StakingHotkeys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 151
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OwnedHotkeys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 151
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Stake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 171,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " (DEPRECATED) DMAP ( hot, cold ) --> stake | Returns the stake under a coldkey prefixed by hotkey."
                ]
              },
              {
                "name": "ColdkeySwapScheduled",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 41
                  }
                },
                "fallback": "0x",
                "docs": []
              },
              {
                "name": "TotalHotkeyAlpha",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "TotalHotkeyShares",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 172
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " DMAP ( hot, netuid ) --> total_alpha_shares | Returns the number of alpha shares for a hotkey on a subnet."
                ]
              },
              {
                "name": "Alpha",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 159,
                    "value": 172
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "TokenSymbol",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 14
                  }
                },
                "fallback": "0x10f09d9c8f",
                "docs": []
              },
              {
                "name": "SubnetName",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 14
                  }
                },
                "fallback": "0x10f09d9c8f",
                "docs": []
              },
              {
                "name": "UsedWork",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 14,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " ============================",
                  " ==== Global Parameters =====",
                  " ============================",
                  " --- StorageItem Global Used Work."
                ]
              },
              {
                "name": "MaxRegistrationsPerBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0100",
                "docs": [
                  " --- ITEM( global_max_registrations_per_block )"
                ]
              },
              {
                "name": "SubnetLimit",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x0c00",
                "docs": [
                  " --- ITEM( maximum_number_of_networks )"
                ]
              },
              {
                "name": "TotalNetworks",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x0000",
                "docs": [
                  " --- ITEM( total_number_of_existing_networks )"
                ]
              },
              {
                "name": "NetworkImmunityPeriod",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xe0c4000000000000",
                "docs": [
                  " ITEM( network_immunity_period )"
                ]
              },
              {
                "name": "NetworkLastRegistered",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " ITEM( network_last_registered_block )"
                ]
              },
              {
                "name": "NetworkMinAllowedUids",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x8000",
                "docs": [
                  " ITEM( network_min_allowed_uids )"
                ]
              },
              {
                "name": "NetworkMinLockCost",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0010a5d4e8000000",
                "docs": [
                  " ITEM( min_network_lock_cost )"
                ]
              },
              {
                "name": "NetworkLastLockCost",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0010a5d4e8000000",
                "docs": [
                  " ITEM( last_network_lock_cost )"
                ]
              },
              {
                "name": "NetworkLockReductionInterval",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xc089010000000000",
                "docs": [
                  " ITEM( network_lock_reduction_interval )"
                ]
              },
              {
                "name": "SubnetOwnerCut",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x142e",
                "docs": [
                  " ITEM( subnet_owner_cut )"
                ]
              },
              {
                "name": "NetworkRateLimit",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x201c000000000000",
                "docs": [
                  " ITEM( network_rate_limit )"
                ]
              },
              {
                "name": "NominatorMinRequiredStake",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "TransferToggle",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x01",
                "docs": [
                  " ============================",
                  " ==== Subnet Locks =====",
                  " ============================"
                ]
              },
              {
                "name": "SubnetLocked",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "LargestLocked",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "AvgTempo",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x6300",
                "docs": [
                  " =================",
                  " ==== Tempos =====",
                  " ================="
                ]
              },
              {
                "name": "MaxTempo",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x1e00",
                "docs": []
              },
              {
                "name": "Tempo",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x6300",
                "docs": []
              },
              {
                "name": "SubnetMechanism",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " ============================",
                  " ==== Subnet Parameters =====",
                  " ============================"
                ]
              },
              {
                "name": "SubnetworkN",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> subnetwork_n (Number of UIDs in the network)."
                ]
              },
              {
                "name": "NetworkModality",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> modality   TEXT: 0, IMAGE: 1, TENSOR: 2"
                ]
              },
              {
                "name": "NetworksAdded",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> network_is_added"
                ]
              },
              {
                "name": "IsNetworkMember",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 156,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- DMAP ( hotkey, netuid ) --> bool"
                ]
              },
              {
                "name": "NetworkRegistrationAllowed",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> network_registration_allowed"
                ]
              },
              {
                "name": "NetworkPowRegistrationAllowed",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> network_pow_allowed"
                ]
              },
              {
                "name": "NetworkRegisteredAt",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> block_created"
                ]
              },
              {
                "name": "EmissionValues",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> emission_values"
                ]
              },
              {
                "name": "PendingEmission",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> pending_emission"
                ]
              },
              {
                "name": "PendingRootDivs",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> pending_root_emission"
                ]
              },
              {
                "name": "PendingAlphaSwapped",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> pending_alpha_swapped"
                ]
              },
              {
                "name": "PendingOwnerCut",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> pending_owner_cut"
                ]
              },
              {
                "name": "BlocksSinceLastStep",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> blocks_since_last_step"
                ]
              },
              {
                "name": "LastMechansimStepBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> last_mechanism_step_block"
                ]
              },
              {
                "name": "SubnetOwner",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 0
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> subnet_owner"
                ]
              },
              {
                "name": "SubnetOwnerHotkey",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 0
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> subnet_owner_hotkey"
                ]
              },
              {
                "name": "ServingRateLimit",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x3200000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> serving_rate_limit"
                ]
              },
              {
                "name": "Rho",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0a00",
                "docs": [
                  " --- MAP ( netuid ) --> Rho"
                ]
              },
              {
                "name": "Kappa",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0xff7f",
                "docs": [
                  " --- MAP ( netuid ) --> Kappa"
                ]
              },
              {
                "name": "NeuronsToPruneAtNextEpoch",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> uid, we use to record uids to prune at next epoch."
                ]
              },
              {
                "name": "RegistrationsThisInterval",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> registrations_this_interval"
                ]
              },
              {
                "name": "POWRegistrationsThisInterval",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> pow_registrations_this_interval"
                ]
              },
              {
                "name": "BurnRegistrationsThisInterval",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> burn_registrations_this_interval"
                ]
              },
              {
                "name": "MaxAllowedUids",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0010",
                "docs": [
                  " --- MAP ( netuid ) --> max_allowed_uids"
                ]
              },
              {
                "name": "ImmunityPeriod",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0010",
                "docs": [
                  " --- MAP ( netuid ) --> immunity_period"
                ]
              },
              {
                "name": "ActivityCutoff",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x8813",
                "docs": [
                  " --- MAP ( netuid ) --> activity_cutoff"
                ]
              },
              {
                "name": "MaxWeightsLimit",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0xe803",
                "docs": [
                  " --- MAP ( netuid ) --> max_weight_limit"
                ]
              },
              {
                "name": "WeightsVersionKey",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> weights_version_key"
                ]
              },
              {
                "name": "MinAllowedWeights",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0004",
                "docs": [
                  " --- MAP ( netuid ) --> min_allowed_weights"
                ]
              },
              {
                "name": "MaxAllowedValidators",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x8000",
                "docs": [
                  " --- MAP ( netuid ) --> max_allowed_validators"
                ]
              },
              {
                "name": "AdjustmentInterval",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x6400",
                "docs": [
                  " --- MAP ( netuid ) --> adjustment_interval"
                ]
              },
              {
                "name": "BondsMovingAverage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0xa0bb0d0000000000",
                "docs": [
                  " --- MAP ( netuid ) --> bonds_moving_average"
                ]
              },
              {
                "name": "BondsPenalty",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> bonds_penalty"
                ]
              },
              {
                "name": "WeightsSetRateLimit",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x6400000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> weights_set_rate_limit"
                ]
              },
              {
                "name": "ValidatorPruneLen",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0100000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> validator_prune_len"
                ]
              },
              {
                "name": "ScalingLawPower",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x3200",
                "docs": [
                  " --- MAP ( netuid ) --> scaling_law_power"
                ]
              },
              {
                "name": "TargetRegistrationsPerInterval",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0200",
                "docs": [
                  " --- MAP ( netuid ) --> target_registrations_this_interval"
                ]
              },
              {
                "name": "AdjustmentAlpha",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> adjustment_alpha"
                ]
              },
              {
                "name": "CommitRevealWeightsEnabled",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> commit reveal v2 weights are enabled"
                ]
              },
              {
                "name": "Burn",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x00ca9a3b00000000",
                "docs": [
                  " --- MAP ( netuid ) --> Burn"
                ]
              },
              {
                "name": "Difficulty",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x8096980000000000",
                "docs": [
                  " --- MAP ( netuid ) --> Difficulty"
                ]
              },
              {
                "name": "MinBurn",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x20a1070000000000",
                "docs": [
                  " --- MAP ( netuid ) --> MinBurn"
                ]
              },
              {
                "name": "MaxBurn",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x00e8764817000000",
                "docs": [
                  " --- MAP ( netuid ) --> MaxBurn"
                ]
              },
              {
                "name": "MinDifficulty",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x8096980000000000",
                "docs": [
                  " --- MAP ( netuid ) --> MinDifficulty"
                ]
              },
              {
                "name": "MaxDifficulty",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0xffffffffffffff3f",
                "docs": [
                  " --- MAP ( netuid ) --> MaxDifficulty"
                ]
              },
              {
                "name": "LastAdjustmentBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) -->  Block at last adjustment."
                ]
              },
              {
                "name": "RegistrationsThisBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 39
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " --- MAP ( netuid ) --> Registrations of this Block."
                ]
              },
              {
                "name": "RAORecycledForRegistration",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( netuid ) --> global_RAO_recycled_for_registration"
                ]
              },
              {
                "name": "TxRateLimit",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xe803000000000000",
                "docs": [
                  " --- ITEM ( tx_rate_limit )"
                ]
              },
              {
                "name": "TxDelegateTakeRateLimit",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xc04b030000000000",
                "docs": [
                  " --- ITEM ( tx_delegate_take_rate_limit )"
                ]
              },
              {
                "name": "TxChildkeyTakeRateLimit",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0xc04b030000000000",
                "docs": [
                  " --- ITEM ( tx_childkey_take_rate_limit )"
                ]
              },
              {
                "name": "LiquidAlphaOn",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> Whether or not Liquid Alpha is enabled"
                ]
              },
              {
                "name": "AlphaValues",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 174
                  }
                },
                "fallback": "0x33b366e6",
                "docs": [
                  "  MAP ( netuid ) --> (alpha_low, alpha_high)"
                ]
              },
              {
                "name": "NetworkMaxStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0xffffffffffffffff",
                "docs": [
                  " MAP ( netuid ) --> max stake allowed on a subnet."
                ]
              },
              {
                "name": "StakeWeight",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " =======================================",
                  " ==== Subnetwork Consensus Storage  ====",
                  " ======================================="
                ]
              },
              {
                "name": "Uids",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 39
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- DMAP ( netuid, hotkey ) --> uid"
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 174,
                    "value": 0
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " --- DMAP ( netuid, uid ) --> hotkey"
                ]
              },
              {
                "name": "LoadedEmission",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 176
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> (hotkey, se, ve)"
                ]
              },
              {
                "name": "Active",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 178
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> active"
                ]
              },
              {
                "name": "Rank",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> rank"
                ]
              },
              {
                "name": "Trust",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> trust"
                ]
              },
              {
                "name": "Consensus",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> consensus"
                ]
              },
              {
                "name": "Incentive",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> incentive"
                ]
              },
              {
                "name": "Dividends",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> dividends"
                ]
              },
              {
                "name": "Emission",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 84
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> emission"
                ]
              },
              {
                "name": "LastUpdate",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 84
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> last_update"
                ]
              },
              {
                "name": "ValidatorTrust",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> validator_trust"
                ]
              },
              {
                "name": "PruningScores",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 175
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> pruning_scores"
                ]
              },
              {
                "name": "ValidatorPermit",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 39,
                    "value": 178
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid ) --> validator_permit"
                ]
              },
              {
                "name": "Weights",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 174,
                    "value": 179
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- DMAP ( netuid, uid ) --> weights"
                ]
              },
              {
                "name": "Bonds",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 174,
                    "value": 179
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- DMAP ( netuid, uid ) --> bonds"
                ]
              },
              {
                "name": "BlockAtRegistration",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 174,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- DMAP ( netuid, uid ) --> block_at_registration"
                ]
              },
              {
                "name": "Axons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 180
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid, hotkey ) --> axon_info"
                ]
              },
              {
                "name": "NeuronCertificates",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 181
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid, hotkey ) --> certificate"
                ]
              },
              {
                "name": "Prometheus",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 157,
                    "value": 183
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP ( netuid, hotkey ) --> prometheus_info"
                ]
              },
              {
                "name": "Identities",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "IdentitiesV2",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 185
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SubnetIdentities",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 186
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SubnetIdentitiesV2",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 187
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "TransactionKeyLastBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity",
                      "Identity"
                    ],
                    "key": 188,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " =================================",
                  " ==== Axon / Promo Endpoints =====",
                  " ================================="
                ]
              },
              {
                "name": "LastTxBlock",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( key ) --> last_block"
                ]
              },
              {
                "name": "LastTxBlockChildKeyTake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( key ) --> last_tx_block_childkey_take"
                ]
              },
              {
                "name": "LastTxBlockDelegateTake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " --- MAP ( key ) --> last_tx_block_delegate_take"
                ]
              },
              {
                "name": "StakeThreshold",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " ITEM( weights_min_stake )"
                ]
              },
              {
                "name": "WeightCommits",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 157,
                    "value": 189
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP (netuid, who) --> VecDeque<(hash, commit_block, first_reveal_block, last_reveal_block)> | Stores a queue of commits for an account on a given netuid."
                ]
              },
              {
                "name": "CRV3WeightCommits",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 191,
                    "value": 192
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " --- MAP (netuid, commit_epoch) --> VecDeque<(who, serialized_compressed_commit, reveal_round)> | Stores a queue of v3 commits for an account on a given netuid."
                ]
              },
              {
                "name": "RevealPeriodEpochs",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "fallback": "0x0100000000000000",
                "docs": [
                  " --- Map (netuid) --> Number of epochs allowed for commit reveal periods"
                ]
              },
              {
                "name": "HasMigrationRun",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 14,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " ==================",
                  " ==== Genesis =====",
                  " =================="
                ]
              }
            ]
          },
          "calls": {
            "type": 195
          },
          "events": {
            "type": 38
          },
          "constants": [
            {
              "name": "InitialIssuance",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " =================================",
                " ==== Initial Value Constants ====",
                " =================================",
                " Initial currency issuance."
              ]
            },
            {
              "name": "InitialMinAllowedWeights",
              "type": 39,
              "value": "0x0004",
              "docs": [
                " Initial min allowed weights setting."
              ]
            },
            {
              "name": "InitialEmissionValue",
              "type": 39,
              "value": "0x0000",
              "docs": [
                " Initial Emission Ratio."
              ]
            },
            {
              "name": "InitialMaxWeightsLimit",
              "type": 39,
              "value": "0xe803",
              "docs": [
                " Initial max weight limit."
              ]
            },
            {
              "name": "InitialTempo",
              "type": 39,
              "value": "0x6300",
              "docs": [
                " Tempo for each network."
              ]
            },
            {
              "name": "InitialDifficulty",
              "type": 6,
              "value": "0x8096980000000000",
              "docs": [
                " Initial Difficulty."
              ]
            },
            {
              "name": "InitialMaxDifficulty",
              "type": 6,
              "value": "0xffffffffffffff3f",
              "docs": [
                " Initial Max Difficulty."
              ]
            },
            {
              "name": "InitialMinDifficulty",
              "type": 6,
              "value": "0x8096980000000000",
              "docs": [
                " Initial Min Difficulty."
              ]
            },
            {
              "name": "InitialRAORecycledForRegistration",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " Initial RAO Recycled."
              ]
            },
            {
              "name": "InitialBurn",
              "type": 6,
              "value": "0x00ca9a3b00000000",
              "docs": [
                " Initial Burn."
              ]
            },
            {
              "name": "InitialMaxBurn",
              "type": 6,
              "value": "0x00e8764817000000",
              "docs": [
                " Initial Max Burn."
              ]
            },
            {
              "name": "InitialMinBurn",
              "type": 6,
              "value": "0x20a1070000000000",
              "docs": [
                " Initial Min Burn."
              ]
            },
            {
              "name": "InitialAdjustmentInterval",
              "type": 39,
              "value": "0x6400",
              "docs": [
                " Initial adjustment interval."
              ]
            },
            {
              "name": "InitialBondsMovingAverage",
              "type": 6,
              "value": "0xa0bb0d0000000000",
              "docs": [
                " Initial bonds moving average."
              ]
            },
            {
              "name": "InitialBondsPenalty",
              "type": 39,
              "value": "0x0000",
              "docs": [
                " Initial bonds penalty."
              ]
            },
            {
              "name": "InitialTargetRegistrationsPerInterval",
              "type": 39,
              "value": "0x0200",
              "docs": [
                " Initial target registrations per interval."
              ]
            },
            {
              "name": "InitialRho",
              "type": 39,
              "value": "0x0a00",
              "docs": [
                " Rho constant."
              ]
            },
            {
              "name": "InitialKappa",
              "type": 39,
              "value": "0xff7f",
              "docs": [
                " Kappa constant."
              ]
            },
            {
              "name": "InitialMaxAllowedUids",
              "type": 39,
              "value": "0x0010",
              "docs": [
                " Max UID constant."
              ]
            },
            {
              "name": "InitialValidatorPruneLen",
              "type": 6,
              "value": "0x0100000000000000",
              "docs": [
                " Initial validator context pruning length."
              ]
            },
            {
              "name": "InitialScalingLawPower",
              "type": 39,
              "value": "0x3200",
              "docs": [
                " Initial scaling law power."
              ]
            },
            {
              "name": "InitialImmunityPeriod",
              "type": 39,
              "value": "0x0010",
              "docs": [
                " Immunity Period Constant."
              ]
            },
            {
              "name": "InitialActivityCutoff",
              "type": 39,
              "value": "0x8813",
              "docs": [
                " Activity constant."
              ]
            },
            {
              "name": "InitialMaxRegistrationsPerBlock",
              "type": 39,
              "value": "0x0100",
              "docs": [
                " Initial max registrations per block."
              ]
            },
            {
              "name": "InitialPruningScore",
              "type": 39,
              "value": "0xffff",
              "docs": [
                " Initial pruning score for each neuron."
              ]
            },
            {
              "name": "InitialMaxAllowedValidators",
              "type": 39,
              "value": "0x8000",
              "docs": [
                " Initial maximum allowed validators per network."
              ]
            },
            {
              "name": "InitialDefaultDelegateTake",
              "type": 39,
              "value": "0x142e",
              "docs": [
                " Initial default delegation take."
              ]
            },
            {
              "name": "InitialMinDelegateTake",
              "type": 39,
              "value": "0x0000",
              "docs": [
                " Initial minimum delegation take."
              ]
            },
            {
              "name": "InitialDefaultChildKeyTake",
              "type": 39,
              "value": "0x0000",
              "docs": [
                " Initial default childkey take."
              ]
            },
            {
              "name": "InitialMinChildKeyTake",
              "type": 39,
              "value": "0x0000",
              "docs": [
                " Initial minimum childkey take."
              ]
            },
            {
              "name": "InitialMaxChildKeyTake",
              "type": 39,
              "value": "0x142e",
              "docs": [
                " Initial maximum childkey take."
              ]
            },
            {
              "name": "InitialWeightsVersionKey",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " Initial weights version key."
              ]
            },
            {
              "name": "InitialServingRateLimit",
              "type": 6,
              "value": "0x3200000000000000",
              "docs": [
                " Initial serving rate limit."
              ]
            },
            {
              "name": "InitialTxRateLimit",
              "type": 6,
              "value": "0xe803000000000000",
              "docs": [
                " Initial transaction rate limit."
              ]
            },
            {
              "name": "InitialTxDelegateTakeRateLimit",
              "type": 6,
              "value": "0xc04b030000000000",
              "docs": [
                " Initial delegate take transaction rate limit."
              ]
            },
            {
              "name": "InitialTxChildKeyTakeRateLimit",
              "type": 6,
              "value": "0xc04b030000000000",
              "docs": [
                " Initial childkey take transaction rate limit."
              ]
            },
            {
              "name": "InitialSenateRequiredStakePercentage",
              "type": 6,
              "value": "0x0100000000000000",
              "docs": [
                " Initial percentage of total stake required to join senate."
              ]
            },
            {
              "name": "InitialAdjustmentAlpha",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " Initial adjustment alpha on burn and pow."
              ]
            },
            {
              "name": "InitialNetworkImmunityPeriod",
              "type": 6,
              "value": "0xe0c4000000000000",
              "docs": [
                " Initial network immunity period"
              ]
            },
            {
              "name": "InitialNetworkMinAllowedUids",
              "type": 39,
              "value": "0x8000",
              "docs": [
                " Initial minimum allowed network UIDs"
              ]
            },
            {
              "name": "InitialNetworkMinLockCost",
              "type": 6,
              "value": "0x0010a5d4e8000000",
              "docs": [
                " Initial network minimum burn cost"
              ]
            },
            {
              "name": "InitialSubnetOwnerCut",
              "type": 39,
              "value": "0x142e",
              "docs": [
                " Initial network subnet cut."
              ]
            },
            {
              "name": "InitialNetworkLockReductionInterval",
              "type": 6,
              "value": "0xc089010000000000",
              "docs": [
                " Initial lock reduction interval."
              ]
            },
            {
              "name": "InitialSubnetLimit",
              "type": 39,
              "value": "0x0c00",
              "docs": [
                " Initial max allowed subnets"
              ]
            },
            {
              "name": "InitialNetworkRateLimit",
              "type": 6,
              "value": "0x201c000000000000",
              "docs": [
                " Initial network creation rate limit"
              ]
            },
            {
              "name": "KeySwapCost",
              "type": 6,
              "value": "0x00e1f50500000000",
              "docs": [
                " Cost of swapping a hotkey."
              ]
            },
            {
              "name": "AlphaHigh",
              "type": 39,
              "value": "0x66e6",
              "docs": [
                " The upper bound for the alpha parameter. Used for Liquid Alpha."
              ]
            },
            {
              "name": "AlphaLow",
              "type": 39,
              "value": "0x33b3",
              "docs": [
                " The lower bound for the alpha parameter. Used for Liquid Alpha."
              ]
            },
            {
              "name": "LiquidAlphaOn",
              "type": 9,
              "value": "0x00",
              "docs": [
                " A flag to indicate if Liquid Alpha is enabled."
              ]
            },
            {
              "name": "InitialNetworkMaxStake",
              "type": 6,
              "value": "0xffffffffffffffff",
              "docs": [
                " Initial network max stake."
              ]
            },
            {
              "name": "InitialColdkeySwapScheduleDuration",
              "type": 4,
              "value": "0xa08c0000",
              "docs": [
                " Coldkey swap schedule duartion."
              ]
            },
            {
              "name": "InitialDissolveNetworkScheduleDuration",
              "type": 4,
              "value": "0xa08c0000",
              "docs": [
                " Dissolve network schedule duration"
              ]
            },
            {
              "name": "InitialTaoWeight",
              "type": 6,
              "value": "0xfc62e03efa3c7c0d",
              "docs": [
                " Initial TAO weight."
              ]
            }
          ],
          "errors": {
            "type": 387
          },
          "index": 7
        },
        {
          "name": "Triumvirate",
          "storage": {
            "prefix": "Triumvirate",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 388
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 201
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 389
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 151
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 202
          },
          "events": {
            "type": 48
          },
          "constants": [],
          "errors": {
            "type": 390
          },
          "index": 8
        },
        {
          "name": "TriumvirateMembers",
          "storage": {
            "prefix": "TriumvirateMembers",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 391
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 203
          },
          "events": {
            "type": 49
          },
          "constants": [],
          "errors": {
            "type": 392
          },
          "index": 9
        },
        {
          "name": "SenateMembers",
          "storage": {
            "prefix": "SenateMembers",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 393
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 204
          },
          "events": {
            "type": 50
          },
          "constants": [],
          "errors": {
            "type": 394
          },
          "index": 10
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 205
          },
          "events": {
            "type": 51
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 395
          },
          "index": 11
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 211
          },
          "events": {
            "type": 52
          },
          "constants": [],
          "errors": {
            "type": 396
          },
          "index": 12
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 397,
                    "value": 398
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": {
            "type": 212
          },
          "events": {
            "type": 53
          },
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": "0x0029de0700000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": "0x0048e80100000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "errors": {
            "type": 400
          },
          "index": 13
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "items": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 401
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "RequestStatusFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 404
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 408,
                    "value": 409
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 214
          },
          "events": {
            "type": 55
          },
          "constants": [],
          "errors": {
            "type": 410
          },
          "index": 14
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "IncompleteSince",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 411
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Retries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 57,
                    "value": 418
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Retry configurations for items to be executed, indexed by task address."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 1,
                    "value": 57
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": {
            "type": 215
          },
          "events": {
            "type": 56
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 11,
              "value": "0x0b0000dd0ee90213cccccccccccccccc",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ]
            }
          ],
          "errors": {
            "type": 419
          },
          "index": 15
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 420
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 424
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 217
          },
          "events": {
            "type": 59
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x0087930300000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x408af70100000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x4b000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x0051250200000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x00990d0400000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 428
          },
          "index": 16
        },
        {
          "name": "Registry",
          "storage": {
            "prefix": "Registry",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 429
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Identity data by account"
                ]
              }
            ]
          },
          "calls": {
            "type": 219
          },
          "events": {
            "type": 61
          },
          "constants": [
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x01000000",
              "docs": [
                " Configuration fields",
                " Maximum user-configured additional fields"
              ]
            },
            {
              "name": "InitialDeposit",
              "type": 6,
              "value": "0x00e1f50500000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x00e1f50500000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            }
          ],
          "errors": {
            "type": 430
          },
          "index": 17
        },
        {
          "name": "Commitments",
          "storage": {
            "prefix": "Commitments",
            "items": [
              {
                "name": "RateLimit",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x64000000",
                "docs": [
                  " The rate limit for commitments"
                ]
              },
              {
                "name": "CommitmentOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Twox64Concat"
                    ],
                    "key": 157,
                    "value": 431
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Identity data by account"
                ]
              },
              {
                "name": "LastCommitment",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Twox64Concat"
                    ],
                    "key": 157,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 286
          },
          "events": {
            "type": 62
          },
          "constants": [
            {
              "name": "MaxFields",
              "type": 4,
              "value": "0x01000000",
              "docs": [
                " The maximum number of additional fields that can be added to a commitment"
              ]
            },
            {
              "name": "InitialDeposit",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x0000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "DefaultRateLimit",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The rate limit for commitments"
              ]
            }
          ],
          "errors": {
            "type": 432
          },
          "index": 18
        },
        {
          "name": "AdminUtils",
          "storage": null,
          "calls": {
            "type": 355
          },
          "events": {
            "type": 63
          },
          "constants": [],
          "errors": {
            "type": 433
          },
          "index": 19
        },
        {
          "name": "SafeMode",
          "storage": {
            "prefix": "SafeMode",
            "items": [
              {
                "name": "EnteredUntil",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Contains the last block number that the safe-mode will remain entered in.",
                  "",
                  "  Set to `None` when safe-mode is exited.",
                  "",
                  " Safe-mode is automatically exited when the current block number exceeds this value."
                ]
              },
              {
                "name": "Deposits",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 434,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Holds the reserve that was taken from an account at a specific block number.",
                  "",
                  " This helps governance to have an overview of outstanding deposits that should be returned or",
                  " slashed."
                ]
              }
            ]
          },
          "calls": {
            "type": 356
          },
          "events": {
            "type": 64
          },
          "constants": [
            {
              "name": "EnterDuration",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " For how many blocks the safe-mode will be entered by [`Pallet::enter`]."
              ]
            },
            {
              "name": "ExtendDuration",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " For how many blocks the safe-mode can be extended by each [`Pallet::extend`] call.",
                "",
                " This does not impose a hard limit as the safe-mode can be extended multiple times."
              ]
            },
            {
              "name": "EnterDepositAmount",
              "type": 435,
              "value": "0x00",
              "docs": [
                " The amount that will be reserved upon calling [`Pallet::enter`].",
                "",
                " `None` disallows permissionlessly enabling the safe-mode and is a sane default."
              ]
            },
            {
              "name": "ExtendDepositAmount",
              "type": 435,
              "value": "0x00",
              "docs": [
                " The amount that will be reserved upon calling [`Pallet::extend`].",
                "",
                " `None` disallows permissionlessly extending the safe-mode and is a sane default."
              ]
            },
            {
              "name": "ReleaseDelay",
              "type": 116,
              "value": "0x00",
              "docs": [
                " The minimal duration a deposit will remain reserved after safe-mode is entered or",
                " extended, unless [`Pallet::force_release_deposit`] is successfully called sooner.",
                "",
                " Every deposit is tied to a specific activation or extension, thus each deposit can be",
                " released independently after the delay for it has passed.",
                "",
                " `None` disallows permissionlessly releasing the safe-mode deposits and is a sane",
                " default."
              ]
            }
          ],
          "errors": {
            "type": 436
          },
          "index": 20
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "plain": 437
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "plain": 446
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "plain": 451
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "plain": 452
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 80,
                    "value": 13
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 357
          },
          "events": {
            "type": 66
          },
          "constants": [],
          "errors": {
            "type": 453
          },
          "index": 21
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 67,
                    "value": 14
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AccountCodesMetadata",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 67,
                    "value": 454
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 455,
                    "value": 13
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Suicided",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 67,
                    "value": 41
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "WhitelistedCreators",
                "modifier": "Default",
                "type": {
                  "plain": 371
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DisableWhitelistCheck",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 367
          },
          "events": {
            "type": 77
          },
          "constants": [],
          "errors": {
            "type": 456
          },
          "index": 22
        },
        {
          "name": "EVMChainId",
          "storage": {
            "prefix": "EVMChainId",
            "items": [
              {
                "name": "ChainId",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The EVM chain ID."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 23
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "items": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "type": {
                  "plain": 80
                },
                "fallback": "0x00c817a804000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "type": {
                  "plain": 82
                },
                "fallback": "0x48e80100",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 372
          },
          "events": {
            "type": 79
          },
          "constants": [],
          "errors": null,
          "index": 25
        },
        {
          "name": "Drand",
          "storage": {
            "prefix": "Drand",
            "items": [
              {
                "name": "BeaconConfig",
                "modifier": "Default",
                "type": {
                  "plain": 383
                },
                "fallback": "0x810183cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a030000002721e6648052db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e97180f477d5c89f21a17c863a7f937c6a6d15859414d2be09cd448d4279af331c5d3e60626c732d756e636861696e65642d67312d7266633933383020717569636b6e6574",
                "docs": [
                  " the drand beacon configuration"
                ]
              },
              {
                "name": "Pulses",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 377
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " map round number to pulse"
                ]
              },
              {
                "name": "LastStoredRound",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextUnsignedAt",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Defines the block when next unsigned transaction will be accepted.",
                  "",
                  " To prevent spam of unsigned (and unpaid!) transactions on the network,",
                  " we only allow one transaction per block.",
                  " This storage entry defines when new transaction is going to be accepted."
                ]
              }
            ]
          },
          "calls": {
            "type": 373
          },
          "events": {
            "type": 83
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 6,
              "value": "0x0000100000000000",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            },
            {
              "name": "HttpFetchTimeout",
              "type": 6,
              "value": "0xe803000000000000",
              "docs": [
                " The maximum number of milliseconds we are willing to wait for the HTTP request to",
                " complete."
              ]
            }
          ],
          "errors": {
            "type": 457
          },
          "index": 26
        }
      ],
      "extrinsic": {
        "type": 458,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": 460,
            "additionalSigned": 41
          },
          {
            "identifier": "CheckSpecVersion",
            "type": 461,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 462,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 463,
            "additionalSigned": 13
          },
          {
            "identifier": "CheckMortality",
            "type": 464,
            "additionalSigned": 13
          },
          {
            "identifier": "CheckNonce",
            "type": 466,
            "additionalSigned": 41
          },
          {
            "identifier": "CheckWeight",
            "type": 467,
            "additionalSigned": 41
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 468,
            "additionalSigned": 41
          },
          {
            "identifier": "SubtensorSignedExtension",
            "type": 469,
            "additionalSigned": 41
          },
          {
            "identifier": "CommitmentsSignedExtension",
            "type": 471,
            "additionalSigned": 41
          },
          {
            "identifier": "CheckMetadataHash",
            "type": 472,
            "additionalSigned": 58
          }
        ]
      },
      "type": 470
    }
  }
}